import React, { useState } from 'react';
import {
  Card,
  Steps,
  Typography,
  Row,
  Col,
  Button,
  Alert,
  Divider,
  Tag,
  Space,
  Image,
  Collapse,
  Timeline,
  List,
  Progress,
  Tooltip,
  Modal
} from 'antd';
import {
  FileTextOutlined,
  PaperClipOutlined,
  TrophyOutlined,
  CheckCircleOutlined,
  EditOutlined,
  StarOutlined,
  CommentOutlined,
  DownloadOutlined,
  CodeOutlined,
  HighlightOutlined,
  EyeOutlined,
  UserOutlined,
  ClockCircleOutlined,
  AppstoreOutlined,
  MailOutlined,
  FilePdfOutlined
} from '@ant-design/icons';

// Import the PDF viewer component
import PDFViewerModal from './components/PDFViewerModal';

const { Title, Text, Paragraph } = Typography;
const { Step } = Steps;
const { Panel } = Collapse;

const GradingSystemDemo = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [demoModalVisible, setDemoModalVisible] = useState(false);
  const [pdfViewerVisible, setPdfViewerVisible] = useState(false);
  
  // Mock data for PDF demo
  const mockStudent = {
    id: 'st1',
    name: 'Nguy·ªÖn VƒÉn An',
    email: 'nguyenvanan@student.edu'
  };
  
  const mockAssignment = {
    id: 'assign1',
    title: 'B√†i t·∫≠p l·∫≠p tr√¨nh JavaScript',
    totalPoints: 100
  };
  
  // Your Google Drive PDF link
  const googleDrivePDFUrl = 'https://drive.google.com/file/d/1dpfAD499ejTyfXJYXhgBuaMeNQ1kwedL/view?usp=sharing';

  const gradingSteps = [
    {
      title: 'H·ªçc sinh n·ªôp b√†i',
      content: 'H·ªçc sinh c√≥ th·ªÉ n·ªôp b√†i b·∫±ng text ho·∫∑c file',
      icon: <FileTextOutlined />
    },
    {
      title: 'Gi√°o vi√™n xem submission',
      content: 'Xem n·ªôi dung b√†i n·ªôp v√† file ƒë√≠nh k√®m',
      icon: <EyeOutlined />
    },
    {
      title: 'Ch·∫•m ƒëi·ªÉm v·ªõi c√¥ng c·ª•',
      content: 'S·ª≠ d·ª•ng rubric, syntax highlighting, annotation',
      icon: <TrophyOutlined />
    },
    {
      title: 'Feedback v√† ho√†n th√†nh',
      content: 'Nh·∫≠n x√©t chi ti·∫øt v√† l∆∞u ƒëi·ªÉm',
      icon: <CheckCircleOutlined />
    }
  ];

  const textSubmissionFeatures = [
    {
      title: 'Smart Text Display',
      description: 'T·ª± ƒë·ªông nh·∫≠n di·ªán v√† format code, ho·∫∑c hi·ªÉn th·ªã text th∆∞·ªùng',
      icon: <EditOutlined style={{ color: '#1890ff' }} />
    },
    {
      title: 'Text Annotation',
      description: 'Highlight v√† comment tr·ª±c ti·∫øp tr√™n text b√†i l√†m',
      icon: <HighlightOutlined style={{ color: '#fa8c16' }} />
    },
    {
      title: 'Quick Feedback',
      description: 'M·∫´u nh·∫≠n x√©t nhanh cho m·ªçi m√¥n h·ªçc',
      icon: <CommentOutlined style={{ color: '#52c41a' }} />
    },
    {
      title: 'Flexible Rubric',
      description: 'T√πy ch·ªânh rubric theo t·ª´ng m√¥n h·ªçc v√† assignment',
      icon: <StarOutlined style={{ color: '#722ed1' }} />
    }
  ];

  const fileSubmissionFeatures = [
    {
      title: 'Multi-format Preview',
      description: 'Xem tr∆∞·ªõc PDF, Word, PowerPoint, h√¨nh ·∫£nh',
      icon: <EyeOutlined style={{ color: '#ff4d4f' }} />
    },
    {
      title: 'File Annotation',
      description: 'Th√™m ghi ch√∫ v√† comment tr√™n file',
      icon: <CommentOutlined style={{ color: '#fa8c16' }} />
    },
    {
      title: 'Zoom & Download',
      description: 'Zoom in/out v√† t·∫£i file v·ªÅ m√°y',
      icon: <DownloadOutlined style={{ color: '#52c41a' }} />
    },
    {
      title: 'File Type Recognition',
      description: 'Icon v√† x·ª≠ l√Ω ƒë·∫∑c bi·ªát cho t·ª´ng lo·∫°i file',
      icon: <PaperClipOutlined style={{ color: '#722ed1' }} />
    }
  ];

  const rubricExample = [
    {
      criteria: 'N·ªôi dung & Ki·∫øn th·ª©c (40 ƒëi·ªÉm)',
      levels: [
        { name: 'Xu·∫•t s·∫Øc', points: 40, desc: 'N·ªôi dung ch√≠nh x√°c, ƒë·∫ßy ƒë·ªß, s√¢u s·∫Øc' },
        { name: 'T·ªët', points: 32, desc: 'N·ªôi dung ƒë√∫ng, kh√° ƒë·∫ßy ƒë·ªß' },
        { name: 'Kh√°', points: 24, desc: 'N·ªôi dung c∆° b·∫£n, m·ªôt s·ªë thi·∫øu s√≥t' },
        { name: 'Y·∫øu', points: 16, desc: 'N·ªôi dung sai nhi·ªÅu ho·∫∑c thi·∫øu' }
      ]
    },
    {
      criteria: 'Tr√¨nh b√†y & C·∫•u tr√∫c (30 ƒëi·ªÉm)',
      levels: [
        { name: 'Xu·∫•t s·∫Øc', points: 30, desc: 'Tr√¨nh b√†y r√µ r√†ng, logic, ng√¥n t·ª´ chu·∫©n' },
        { name: 'T·ªët', points: 24, desc: 'Tr√¨nh b√†y t·ªët, c√≥ logic' },
        { name: 'Kh√°', points: 18, desc: 'Tr√¨nh b√†y b√¨nh th∆∞·ªùng' },
        { name: 'Y·∫øu', points: 12, desc: 'Tr√¨nh b√†y k√©m, kh√≥ hi·ªÉu' }
      ]
    },
    {
      criteria: 'T∆∞ duy & Ph√¢n t√≠ch (30 ƒëi·ªÉm)',
      levels: [
        { name: 'Xu·∫•t s·∫Øc', points: 30, desc: 'T∆∞ duy s√¢u s·∫Øc, ph√¢n t√≠ch t·ªët' },
        { name: 'T·ªët', points: 24, desc: 'C√≥ t∆∞ duy, ph√¢n t√≠ch kh√°' },
        { name: 'Kh√°', points: 18, desc: 'T∆∞ duy c∆° b·∫£n' },
        { name: 'Y·∫øu', points: 12, desc: 'Thi·∫øu t∆∞ duy, kh√¥ng ph√¢n t√≠ch' }
      ]
    }
  ];

  const batchGradingFeatures = [
    'Ch·ªçn nhi·ªÅu submission ƒë·ªÉ ch·∫•m c√πng l√∫c',
    '√Åp d·ª•ng ƒëi·ªÉm v√† feedback gi·ªëng nhau',
    'G·ª≠i email nh·∫Øc nh·ªü h·ªçc sinh ch∆∞a n·ªôp',
    'Xu·∫•t file Excel/CSV ƒëi·ªÉm s·ªë',
    'Th·ªëng k√™ v√† ph√¢n t√≠ch submission'
  ];

  const handlePDFGradeDemo = () => {
    setPdfViewerVisible(true);
  };

  const handleSavePDFGrade = (gradingData) => {
    console.log('PDF Grading Data:', gradingData);
    setPdfViewerVisible(false);
  };

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="text-center mb-8">
        <Title level={1}>üéØ H·ªá th·ªëng Ch·∫•m ƒëi·ªÉm Assignment</Title>
        <Paragraph className="text-lg text-gray-600">
          C√¥ng c·ª• ch·∫•m ƒëi·ªÉm linh ho·∫°t cho m·ªçi m√¥n h·ªçc - h·ªó tr·ª£ text, file, v√† rubric t√πy ch·ªânh
        </Paragraph>
      </div>

      {/* Process Overview */}
      <Card className="mb-8">
        <Title level={2}>üìã Quy tr√¨nh ch·∫•m ƒëi·ªÉm</Title>
        <Steps current={currentStep} className="mb-6">
          {gradingSteps.map((step, index) => (
            <Step 
              key={index}
              title={step.title} 
              description={step.content}
              icon={step.icon}
            />
          ))}
        </Steps>
        <div className="text-center">
          <Space>
            <Button 
              disabled={currentStep === 0}
              onClick={() => setCurrentStep(currentStep - 1)}
            >
              Tr∆∞·ªõc
            </Button>
            <Button 
              type="primary"
              disabled={currentStep === gradingSteps.length - 1}
              onClick={() => setCurrentStep(currentStep + 1)}
            >
              Ti·∫øp
            </Button>
            <Button onClick={() => setDemoModalVisible(true)}>
              Xem Demo
            </Button>
          </Space>
        </div>
      </Card>

      <Row gutter={[24, 24]}>
        {/* Text Submission */}
        <Col span={12}>
          <Card 
            title={
              <Space>
                <FileTextOutlined style={{ color: '#1890ff' }} />
                <span>üìù Text Submission</span>
              </Space>
            }
            className="h-full"
          >
            <Alert
              message="D√†nh cho c√¢u tr·∫£ l·ªùi text, essay, b√†i vi·∫øt, ho·∫∑c code"
              type="info"
              className="mb-4"
              showIcon
            />

            <Title level={4}>‚ú® T√≠nh nƒÉng ch√≠nh:</Title>
            <List
              dataSource={textSubmissionFeatures}
              renderItem={(item) => (
                <List.Item>
                  <List.Item.Meta
                    avatar={item.icon}
                    title={item.title}
                    description={item.description}
                  />
                </List.Item>
              )}
            />

            <Divider />

            <Title level={4}>üñ•Ô∏è V√≠ d·ª• hi·ªÉn th·ªã code:</Title>
            <Card size="small" className="bg-gray-50">
              <pre style={{ 
                background: '#f5f5f5',
                padding: '12px',
                borderRadius: '6px',
                fontSize: '13px',
                margin: 0
              }}>
                <code dangerouslySetInnerHTML={{ 
                  __html: `<span style="color: #8c8c8c;">// B√†i t·∫≠p JavaScript</span>
<span style="color: #1890ff; font-weight: bold;">function</span> calculateSum(arr) {
  <span style="color: #1890ff; font-weight: bold;">return</span> arr.reduce((sum, num) => sum + num, <span style="color: #fa8c16;">0</span>);
}

<span style="color: #8c8c8c;">// Test case</span>
<span style="color: #1890ff; font-weight: bold;">const</span> numbers = [<span style="color: #fa8c16;">1</span>, <span style="color: #fa8c16;">2</span>, <span style="color: #fa8c16;">3</span>, <span style="color: #fa8c16;">4</span>, <span style="color: #fa8c16;">5</span>];
console.log(<span style="color: #52c41a;">"Sum:"</span>, calculateSum(numbers));`
                }} />
              </pre>
            </Card>
          </Card>
        </Col>

        {/* File Submission */}
        <Col span={12}>
          <Card 
            title={
              <Space>
                <PaperClipOutlined style={{ color: '#52c41a' }} />
                <span>üìé File Submission</span>
              </Space>
            }
            className="h-full"
          >
            <Alert
              message="D√†nh cho b√†i t·∫≠p file Word, PDF, code project, h√¨nh ·∫£nh"
              type="success"
              className="mb-4"
              showIcon
            />

            <Title level={4}>‚ú® T√≠nh nƒÉng ch√≠nh:</Title>
            <List
              dataSource={fileSubmissionFeatures}
              renderItem={(item) => (
                <List.Item>
                  <List.Item.Meta
                    avatar={item.icon}
                    title={item.title}
                    description={item.description}
                  />
                </List.Item>
              )}
            />

            <Divider />

            <Title level={4}>üìÅ C√°c lo·∫°i file h·ªó tr·ª£:</Title>
            <Space wrap>
              <Tag color="red" icon={<FileTextOutlined />}>PDF</Tag>
              <Tag color="blue" icon={<FileTextOutlined />}>Word</Tag>
              <Tag color="orange" icon={<FileTextOutlined />}>PowerPoint</Tag>
              <Tag color="green" icon={<FileTextOutlined />}>Excel</Tag>
              <Tag color="purple" icon={<CodeOutlined />}>Code Files</Tag>
              <Tag color="cyan" icon={<PaperClipOutlined />}>Images</Tag>
              <Tag color="magenta" icon={<PaperClipOutlined />}>ZIP/RAR</Tag>
            </Space>

            <Divider />

            <Title level={4}>üöÄ Demo v·ªõi Google Drive PDF:</Title>
            <Alert
              message="Test v·ªõi link PDF th·ª±c t·∫ø"
              description="Nh·∫•n n√∫t d∆∞·ªõi ƒë·ªÉ demo xem v√† ch·∫•m file PDF t·ª´ Google Drive"
              type="warning"
              showIcon
              className="mb-3"
            />
            <Button 
              type="primary" 
              icon={<FilePdfOutlined />}
              onClick={handlePDFGradeDemo}
              size="large"
              className="w-full"
            >
              üéØ Demo ch·∫•m PDF t·ª´ Google Drive
            </Button>
          </Card>
        </Col>
      </Row>

      {/* Advanced Features */}
      <Row gutter={[24, 24]} className="mt-8">
        {/* Rubric System */}
        <Col span={12}>
          <Card title={<><StarOutlined style={{ color: '#faad14' }} /> üèÜ H·ªá th·ªëng Rubric</>}>
            <Paragraph>
              Ch·∫•m ƒëi·ªÉm theo ti√™u ch√≠ c·ª• th·ªÉ, t·ª± ƒë·ªông t√≠nh t·ªïng ƒëi·ªÉm
            </Paragraph>

            <Collapse>
              {rubricExample.map((criteria, index) => (
                <Panel header={criteria.criteria} key={index}>
                  <Space direction="vertical" style={{ width: '100%' }}>
                    {criteria.levels.map((level, idx) => (
                      <Card key={idx} size="small" className="cursor-pointer hover:border-blue-400">
                        <div className="flex justify-between">
                          <div>
                            <Text strong>{level.name}</Text> - {level.points} ƒëi·ªÉm
                            <br />
                            <Text type="secondary">{level.desc}</Text>
                          </div>
                          <CheckCircleOutlined style={{ color: '#1890ff', opacity: 0.3 }} />
                        </div>
                      </Card>
                    ))}
                  </Space>
                </Panel>
              ))}
            </Collapse>
          </Card>
        </Col>

        {/* Batch Grading */}
        <Col span={12}>
                     <Card title={<><AppstoreOutlined style={{ color: '#722ed1' }} /> ‚ö° Ch·∫•m ƒëi·ªÉm h√†ng lo·∫°t</>}>
            <Paragraph>
              Qu·∫£n l√Ω v√† ch·∫•m ƒëi·ªÉm nhi·ªÅu submission c√πng l√∫c
            </Paragraph>

            <Title level={4}>üìä Th·ªëng k√™ submission:</Title>
            <Row gutter={8} className="mb-4">
              <Col span={6}>
                <Card size="small" className="text-center">
                  <div className="text-2xl font-bold text-blue-600">25</div>
                  <div className="text-xs">T·ªïng HS</div>
                </Card>
              </Col>
              <Col span={6}>
                <Card size="small" className="text-center">
                  <div className="text-2xl font-bold text-green-600">22</div>
                  <div className="text-xs">ƒê√£ n·ªôp</div>
                </Card>
              </Col>
              <Col span={6}>
                <Card size="small" className="text-center">
                  <div className="text-2xl font-bold text-orange-600">18</div>
                  <div className="text-xs">ƒê√£ ch·∫•m</div>
                </Card>
              </Col>
              <Col span={6}>
                <Card size="small" className="text-center">
                  <div className="text-2xl font-bold text-red-600">3</div>
                  <div className="text-xs">Ch∆∞a n·ªôp</div>
                </Card>
              </Col>
            </Row>

            <Title level={4}>üîß T√≠nh nƒÉng:</Title>
            <List
              size="small"
              dataSource={batchGradingFeatures}
              renderItem={(item) => (
                <List.Item>
                  <CheckCircleOutlined style={{ color: '#52c41a' }} /> {item}
                </List.Item>
              )}
            />
          </Card>
        </Col>
      </Row>

      {/* Demo Modal */}
      <Modal
        title="üé¨ Demo h·ªá th·ªëng ch·∫•m ƒëi·ªÉm"
        open={demoModalVisible}
        onCancel={() => setDemoModalVisible(false)}
        footer={[
          <Button key="close" onClick={() => setDemoModalVisible(false)}>
            ƒê√≥ng
          </Button>
        ]}
        width={800}
      >
        <Timeline>
          <Timeline.Item 
            dot={<UserOutlined />}
            color="blue"
          >
            <Text strong>H·ªçc sinh n·ªôp b√†i</Text>
            <div className="mt-2">
              <Text>H·ªçc sinh "Nguy·ªÖn VƒÉn An" n·ªôp b√†i JavaScript exercise</Text>
              <div className="flex gap-2 mt-1">
                <Tag color="blue">Text content: 245 d√≤ng code</Tag>
                <Tag color="green">2 files: .js v√† .png</Tag>
              </div>
            </div>
          </Timeline.Item>

          <Timeline.Item 
            dot={<EyeOutlined />}
            color="green"
          >
            <Text strong>Gi√°o vi√™n xem submission</Text>
            <div className="mt-2">
              <Text>M·ªü modal ch·∫•m ƒëi·ªÉm, xem code v·ªõi syntax highlighting</Text>
              <br />
              <Text type="secondary">‚Ä¢ Code ƒë∆∞·ª£c format ƒë·∫πp v·ªõi m√†u s·∫Øc</Text>
              <br />
              <Text type="secondary">‚Ä¢ Preview file ƒë√≠nh k√®m</Text>
            </div>
          </Timeline.Item>

          <Timeline.Item 
            dot={<StarOutlined />}
            color="orange"
          >
            <Text strong>Ch·∫•m ƒëi·ªÉm b·∫±ng Rubric</Text>
            <div className="mt-2">
              <Text>Ch·ªçn m·ª©c ƒëi·ªÉm cho t·ª´ng ti√™u ch√≠:</Text>
              <div className="mt-1">
                <Tag color="success">T√≠nh ch√≠nh x√°c: 24/30 ƒëi·ªÉm</Tag>
                <Tag color="success">Tr√¨nh b√†y: 16/20 ƒëi·ªÉm</Tag>
                <Tag color="warning">S√°ng t·∫°o: 9/15 ƒëi·ªÉm</Tag>
              </div>
              <Text strong>T·ªïng: 49/65 ƒëi·ªÉm</Text>
            </div>
          </Timeline.Item>

          <Timeline.Item 
            dot={<CommentOutlined />}
            color="red"
          >
            <Text strong>Feedback chi ti·∫øt</Text>
            <div className="mt-2">
              <Card size="small" className="bg-blue-50">
                <Text>
                  "B√†i l√†m t·ªët! Code s·∫°ch s·∫Ω v√† logic r√µ r√†ng. 
                  C√≥ th·ªÉ c·∫£i thi·ªán th√™m error handling v√† optimization. 
                  Ph·∫ßn bonus r·∫•t s√°ng t·∫°o!"
                </Text>
              </Card>
            </div>
          </Timeline.Item>

          <Timeline.Item 
            dot={<CheckCircleOutlined />}
            color="green"
          >
            <Text strong>Ho√†n th√†nh & Th√¥ng b√°o</Text>
            <div className="mt-2">
              <Text>L∆∞u ƒëi·ªÉm v√† g·ª≠i th√¥ng b√°o cho h·ªçc sinh</Text>
              <br />
              <Progress percent={75} status="success" className="mt-2" />
              <Text type="secondary">ƒêi·ªÉm: 49/65 (75%)</Text>
            </div>
          </Timeline.Item>
        </Timeline>
      </Modal>

      {/* Call to Action */}
      <Card className="mt-8 text-center bg-gradient-to-r from-blue-50 to-purple-50">
        <Title level={3}>üöÄ B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng h·ªá th·ªëng ch·∫•m ƒëi·ªÉm</Title>
        <Paragraph className="text-lg">
          H·ªá th·ªëng ch·∫•m ƒëi·ªÉm th√¥ng minh gi√∫p gi√°o vi√™n ti·∫øt ki·ªám th·ªùi gian v√† ch·∫•m ƒëi·ªÉm c√¥ng b·∫±ng, ch√≠nh x√°c h∆°n.
        </Paragraph>
        <Space size="large">
          <Button type="primary" size="large" icon={<TrophyOutlined />}>
            Th·ª≠ ngay
          </Button>
          <Button size="large" icon={<FileTextOutlined />}>
            Xem h∆∞·ªõng d·∫´n
          </Button>
          <Button 
            size="large" 
            icon={<FilePdfOutlined />}
            onClick={handlePDFGradeDemo}
            className="bg-red-500 text-white hover:bg-red-600"
          >
            Demo PDF Google Drive
          </Button>
        </Space>
      </Card>

      {/* PDF Viewer Modal */}
      <PDFViewerModal
        visible={pdfViewerVisible}
        onCancel={() => setPdfViewerVisible(false)}
        onSave={handleSavePDFGrade}
        pdfUrl={googleDrivePDFUrl}
        fileName="Database.pdf"
        student={mockStudent}
        assignment={mockAssignment}
      />
    </div>
  );
};

export default GradingSystemDemo; 