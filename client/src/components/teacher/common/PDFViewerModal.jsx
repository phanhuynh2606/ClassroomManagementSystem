import React, { useState, useEffect } from 'react';
import {
  Modal,
  Button,
  Space,
  Typography,
  Card,
  Row,
  Col,
  Input,
  Form,
  Rate,
  message,
  Spin,
  Alert,
  Tooltip,
  Slider,
  Divider,
  Tag,
  Select
} from 'antd';
import {
  ZoomInOutlined,
  ZoomOutOutlined,
  DownloadOutlined,
  FullscreenOutlined,
  CommentOutlined,
  HighlightOutlined,
  EditOutlined,
  SaveOutlined,
  RotateRightOutlined,
  PrinterOutlined,
  FileTextOutlined,
  StarOutlined
} from '@ant-design/icons';

const { Title, Text } = Typography;
const { TextArea } = Input;
const { Option } = Select;

const PDFViewerModal = ({ 
  visible, 
  onCancel, 
  onSave,
  pdfUrl, 
  fileName,
  student,
  assignment 
}) => {
  const [loading, setLoading] = useState(true);
  const [zoom, setZoom] = useState(100);
  const [rotation, setRotation] = useState(0);
  const [annotations, setAnnotations] = useState([]);
  const [grade, setGrade] = useState(null);
  const [feedback, setFeedback] = useState('');
  const [embedMethod, setEmbedMethod] = useState('preview'); // preview, embed, direct, demo
  const [form] = Form.useForm();

  // Convert Google Drive link to embeddable format
  const getEmbeddablePDFUrl = (url) => {
    if (url.includes('drive.google.com')) {
      // Extract file ID from Google Drive URL
      const fileId = url.match(/\/d\/([a-zA-Z0-9-_]+)/)?.[1];
      if (fileId) {
        // Try different embedding approaches for Google Drive
        return {
          preview: `https://drive.google.com/file/d/${fileId}/preview`,
          embed: `https://drive.google.com/file/d/${fileId}/view?embedded=true`,
          direct: `https://docs.google.com/gview?url=https://drive.google.com/uc?id=${fileId}&embedded=true`
        };
      }
    }
    return { preview: url, embed: url, direct: url };
  };

  const embeddableUrls = getEmbeddablePDFUrl(pdfUrl);

  useEffect(() => {
    if (visible) {
      setLoading(true);
      // Try to load the PDF, if it fails, fall back to demo
      const timer = setTimeout(() => {
        setLoading(false);
      }, 3000);
      
      return () => clearTimeout(timer);
    }
  }, [visible, embedMethod]);

  const handleZoomIn = () => {
    setZoom(prev => Math.min(prev + 25, 200));
  };

  const handleZoomOut = () => {
    setZoom(prev => Math.max(prev - 25, 50));
  };

  const handleRotate = () => {
    setRotation(prev => (prev + 90) % 360);
  };

  const handleAddAnnotation = () => {
    const newAnnotation = {
      id: Date.now(),
      type: 'comment',
      content: 'Ghi ch√∫ m·ªõi',
      x: 50,
      y: 50
    };
    setAnnotations([...annotations, newAnnotation]);
  };

  const handleSaveGrade = () => {
    if (!grade) {
      message.error('Vui l√≤ng nh·∫≠p ƒëi·ªÉm');
      return;
    }

    const gradingData = {
      grade,
      feedback,
      annotations,
      viewedAt: new Date().toISOString(),
      fileName,
      pdfUrl
    };

    onSave(gradingData);
    message.success('ƒê√£ l∆∞u ƒëi·ªÉm th√†nh c√¥ng!');
  };

  const handleDownload = () => {
    if (pdfUrl.includes('drive.google.com')) {
      const fileId = pdfUrl.match(/\/d\/([a-zA-Z0-9-_]+)/)?.[1];
      if (fileId) {
        const downloadUrl = `https://drive.google.com/uc?export=download&id=${fileId}`;
        window.open(downloadUrl, '_blank');
      }
    } else {
      window.open(pdfUrl, '_blank');
    }
    message.success('ƒêang t·∫£i xu·ªëng file PDF...');
  };

  const quickFeedbacks = [
    'B√†i l√†m t·ªët, n·ªôi dung ƒë·∫ßy ƒë·ªß v√† r√µ r√†ng.',
    'C·∫ßn c·∫£i thi·ªán c√°ch tr√¨nh b√†y v√† b·ªë c·ª•c.',
    'N·ªôi dung ch√≠nh x√°c nh∆∞ng thi·∫øu chi ti·∫øt.',
    'B√†i vi·∫øt hay, th·ªÉ hi·ªán t∆∞ duy t·ªët.',
    'C·∫ßn b·ªï sung th√™m v√≠ d·ª• minh h·ªça.'
  ];

  return (
    <Modal
      title={
        <div className="flex items-center justify-between">
          <Space>
            <FileTextOutlined />
            <span>Xem & Ch·∫•m PDF: {fileName}</span>
          </Space>
          <Space>
            <Text type="secondary">
              {student?.name} ‚Ä¢ {assignment?.title}
            </Text>
          </Space>
        </div>
      }
      open={visible}
      onCancel={onCancel}
      width="95vw"
      style={{ top: 20 }}
      footer={null}
      destroyOnHidden
    >
      <Row gutter={24} style={{ height: '80vh',overflow:"auto" }}>
        {/* PDF Viewer */}
        <Col span={16}>
          <Card 
            title={
              <div className="flex justify-between items-center">
                <span>üìÑ {fileName}</span>
                <Space>
                  <Text type="secondary">Zoom: {zoom}%</Text>
                  <Button.Group>
                    <Button icon={<ZoomOutOutlined />} onClick={handleZoomOut} />
                    <Button icon={<ZoomInOutlined />} onClick={handleZoomIn} />
                    <Button icon={<RotateRightOutlined />} onClick={handleRotate} />
                    <Button icon={<FullscreenOutlined />} />
                  </Button.Group>
                </Space>
              </div>
            }
                         extra={
               <Space>
                 <Select
                   value={embedMethod}
                   onChange={setEmbedMethod}
                   style={{ width: 150 }}
                   size="small"
                 >
                   <Option value="preview">Google Preview</Option>
                   <Option value="embed">Google Embed</Option>
                   <Option value="direct">Google Viewer</Option>
                   <Option value="demo">Demo Mode</Option>
                 </Select>
                 <Button icon={<DownloadOutlined />} onClick={handleDownload}>
                   T·∫£i xu·ªëng
                 </Button>
                 <Button icon={<PrinterOutlined />} onClick={() => window.print()}>
                   In
                 </Button>
               </Space>
             }
            className="h-full"
          >
            <div 
              className="relative overflow-auto bg-gray-100 flex items-center justify-center"
              style={{ 
                height: 'calc(80vh - 120px)',
                transform: `scale(${zoom / 100}) rotate(${rotation}deg)`,
                transformOrigin: 'center center'
              }}
            >
              {loading ? (
                <div className="text-center">
                  <Spin size="large" />
                  <div className="mt-4">
                    <Text>ƒêang t·∫£i PDF...</Text>
                  </div>
                </div>
              ) : (
                                 <>
                   {/* PDF Display based on method */}
                   {embedMethod === 'demo' ? (
                     /* Demo Mode */
                     <div className="w-full h-full">
                       <Alert
                         message="Demo Mode - Google Drive PDF"
                         description={
                           <div>
                             <Text>
                               ƒê√¢y l√† demo mode. Chuy·ªÉn sang mode kh√°c ƒë·ªÉ th·ª≠ load PDF th·∫≠t.
                             </Text>
                             <br />
                             <Text type="secondary">
                               Link g·ªëc: <a href={pdfUrl} target="_blank" rel="noopener noreferrer">
                                 {fileName}
                               </a>
                             </Text>
                           </div>
                         }
                         type="info"
                         showIcon
                         className="mb-4"
                       />
                       
                       {/* Demo PDF Content */}
                       <div className="bg-white p-8 rounded shadow-lg" style={{ minHeight: '600px' }}>
                         <div className="text-center mb-6">
                           <Title level={3}>üìÑ {fileName}</Title>
                           <Text type="secondary">H·ªçc sinh: {student?.name}</Text>
                         </div>
                         
                         <div className="space-y-4">
                           <div>
                             <Title level={4}>1. Gi·ªõi thi·ªáu</Title>
                             <Text>
                               B√†i t·∫≠p n√†y y√™u c·∫ßu sinh vi√™n thi·∫øt k·∫ø v√† x√¢y d·ª±ng c∆° s·ªü d·ªØ li·ªáu 
                               cho h·ªá th·ªëng qu·∫£n l√Ω th∆∞ vi·ªán.
                             </Text>
                           </div>
                           
                           <div>
                             <Title level={4}>2. Y√™u c·∫ßu</Title>
                             <ul>
                               <li>Thi·∫øt k·∫ø ERD cho h·ªá th·ªëng th∆∞ vi·ªán</li>
                               <li>T·∫°o c√°c b·∫£ng v·ªõi c√°c r√†ng bu·ªôc ph√π h·ª£p</li>
                               <li>Vi·∫øt c√°c c√¢u truy v·∫•n SQL c∆° b·∫£n v√† n√¢ng cao</li>
                               <li>T·ªëi ∆∞u h√≥a hi·ªáu su·∫•t c∆° s·ªü d·ªØ li·ªáu</li>
                             </ul>
                           </div>
                           
                           <div>
                             <Title level={4}>3. Thi·∫øt k·∫ø ERD</Title>
                             <div className="bg-gray-50 p-4 rounded">
                               <Text>C√°c entity ch√≠nh:</Text>
                               <ul>
                                 <li>Book (BookID, Title, Author, ISBN, PublishYear)</li>
                                 <li>Reader (ReaderID, FullName, Email, Phone)</li>
                                 <li>Borrow (BorrowID, BookID, ReaderID, BorrowDate, ReturnDate)</li>
                               </ul>
                             </div>
                           </div>
                           
                           <div>
                             <Title level={4}>4. K·∫øt lu·∫≠n</Title>
                             <Text>
                               Em ƒë√£ ho√†n th√†nh thi·∫øt k·∫ø c∆° s·ªü d·ªØ li·ªáu v·ªõi ƒë·∫ßy ƒë·ªß c√°c r√†ng bu·ªôc 
                               v√† t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t truy v·∫•n.
                             </Text>
                           </div>
                         </div>
                       </div>
                     </div>
                   ) : (
                     /* Try to embed real PDF */
                     <div className="w-full h-full relative">
                       <Alert
                         message={`ƒêang th·ª≠ load PDF t·ª´ Google Drive (${embedMethod} mode)`}
                         description={
                           <div>
                             <Text>
                               N·∫øu PDF kh√¥ng hi·ªÉn th·ªã, c√≥ th·ªÉ do gi·ªõi h·∫°n quy·ªÅn truy c·∫≠p c·ªßa Google Drive.
                             </Text>
                             <br />
                             <Text type="secondary">
                               <a href={pdfUrl} target="_blank" rel="noopener noreferrer">
                                 M·ªü PDF trong tab m·ªõi
                               </a>
                             </Text>
                           </div>
                         }
                         type="warning"
                         showIcon
                         className="mb-4"
                       />
                       
                       <iframe
                         src={embeddableUrls[embedMethod]}
                         width="100%"
                         height="calc(100% - 100px)"
                         frameBorder="0"
                         title="PDF Viewer"
                         onError={() => {
                           message.warning('Kh√¥ng th·ªÉ t·∫£i PDF. Chuy·ªÉn sang Demo mode.');
                           setEmbedMethod('demo');
                         }}
                         onLoad={() => {
                           message.success('PDF ƒë√£ t·∫£i th√†nh c√¥ng!');
                         }}
                       />
                     </div>
                   )}
                  
                  {/* Annotation Overlay */}
                  {annotations.map(annotation => (
                    <div
                      key={annotation.id}
                      className="absolute bg-yellow-200 p-2 rounded shadow cursor-pointer"
                      style={{
                        left: `${annotation.x}%`,
                        top: `${annotation.y}%`,
                        zIndex: 10
                      }}
                    >
                      <CommentOutlined /> {annotation.content}
                    </div>
                  ))}
                </>
              )}
            </div>
          </Card>
        </Col>

        {/* Grading Panel */}
        <Col span={8}>
          <Card title="üéØ Ch·∫•m ƒëi·ªÉm" className="h-full">
            <Form form={form} layout="vertical">
              {/* Student Info */}
              <div className="mb-4 p-3 bg-blue-50 rounded">
                <Text strong>üë§ {student?.name}</Text>
                <br />
                <Text type="secondary">{student?.email}</Text>
              </div>

              {/* Quick Grade Buttons */}
              <div className="mb-4">
                <Text strong className="block mb-2">Ch·∫•m nhanh:</Text>
                <Space wrap>
                  {[10, 9, 8, 7, 6, 5].map(score => (
                    <Button 
                      key={score}
                      size="small"
                      type={grade === score ? "primary" : "default"}
                      onClick={() => setGrade(score)}
                      className={`${score >= 8 ? 'text-green-600' : score >= 6 ? 'text-orange-600' : 'text-red-600'}`}
                    >
                      {score}/10
                    </Button>
                  ))}
                </Space>
              </div>

              {/* Detailed Grade */}
              <Form.Item label="ƒêi·ªÉm chi ti·∫øt" name="grade">
                <div className="flex items-center gap-2">
                  <Slider
                    min={0}
                    max={10}
                    step={0.5}
                    value={grade || 0}
                    onChange={setGrade}
                    style={{ flex: 1 }}
                  />
                  <Input
                    type="number"
                    min={0}
                    max={10}
                    step={0.5}
                    value={grade}
                    onChange={(e) => setGrade(parseFloat(e.target.value))}
                    style={{ width: 80 }}
                    suffix="/10"
                  />
                </div>
                {grade && (
                  <div className="mt-2">
                    <Rate
                      disabled
                      allowHalf
                      value={grade / 2}
                      style={{ fontSize: 16 }}
                    />
                    <Tag 
                      color={grade >= 8 ? 'success' : grade >= 6 ? 'warning' : 'error'}
                      className="ml-2"
                    >
                      {grade >= 8 ? 'Gi·ªèi' : grade >= 6 ? 'Kh√°' : 'Trung b√¨nh'}
                    </Tag>
                  </div>
                )}
              </Form.Item>

              <Divider />

              {/* Feedback */}
              <Form.Item label="Nh·∫≠n x√©t" name="feedback">
                <TextArea
                  rows={6}
                  placeholder="Nh·∫≠p nh·∫≠n x√©t chi ti·∫øt v·ªÅ b√†i l√†m..."
                  value={feedback}
                  onChange={(e) => setFeedback(e.target.value)}
                  showCount
                  maxLength={500}
                />
              </Form.Item>

              {/* Quick Feedback */}
              <div className="mb-4">
                <Text strong className="block mb-2">Nh·∫≠n x√©t nhanh:</Text>
                <div className="space-y-1">
                  {quickFeedbacks.map((text, index) => (
                    <Button 
                      key={index}
                      size="small"
                      block
                      className="text-left text-xs"
                      onClick={() => setFeedback(text)}
                    >
                      {text}
                    </Button>
                  ))}
                </div>
              </div>

              {/* Annotation Tools */}
              <div className="mb-4">
                <Text strong className="block mb-2">C√¥ng c·ª• ghi ch√∫:</Text>
                <Space>
                  <Button 
                    size="small"
                    icon={<CommentOutlined />}
                    onClick={handleAddAnnotation}
                  >
                    Th√™m ghi ch√∫
                  </Button>
                  <Button 
                    size="small"
                    icon={<HighlightOutlined />}
                  >
                    Highlight
                  </Button>
                </Space>
              </div>

              {/* Save Button */}
              <Button 
                type="primary" 
                block 
                size="large"
                icon={<SaveOutlined />}
                onClick={handleSaveGrade}
                disabled={!grade}
              >
                L∆∞u ƒëi·ªÉm ({grade || 0}/10)
              </Button>
            </Form>
          </Card>
        </Col>
      </Row>
    </Modal>
  );
};

export default PDFViewerModal; 