import React from 'react';
import {
  Card,
  Alert,
  Tag,
  Space,
  Typography,
  Progress,
  Row,
  Col,
  Statistic,
  Tooltip,
  Badge
} from 'antd';
import {
  TrophyOutlined,
  WarningOutlined,
  CheckCircleOutlined,
  InfoCircleOutlined,
  ClockCircleOutlined,
  StarOutlined,
  RiseOutlined,
  FallOutlined,
  ThunderboltOutlined
} from '@ant-design/icons';

const { Text, Title } = Typography;

const AnalyticsInsights = ({ analyticsData, assignment }) => {
  if (!analyticsData || !analyticsData.overview) {
    return (
      <Card>
        <div className="text-center py-8">
          <InfoCircleOutlined style={{ fontSize: '48px', color: '#d9d9d9' }} />
          <Title level={4} type="secondary" className="mt-4">
            Th·ªëng k√™ ph√¢n t√≠ch
          </Title>
          <Text type="secondary">
            Th·ªëng k√™ s·∫Ω ƒë∆∞·ª£c t·∫°o khi d·ªØ li·ªáu c√≥ s·∫µn.
          </Text>
        </div>
      </Card>
    );
  }

  const { overview, gradeDistribution, performanceInsights, timeAnalysis } = analyticsData;
  const maxGrade = assignment?.totalPoints || 100;

  const generateInsights = () => {
    const insights = [];

    // 1. Overall Performance Insight
    const passingRate = Number(overview.passingRate) || 0;
    
    if (passingRate >= 90) {
      insights.push({
        type: 'success',
        icon: <TrophyOutlined />,
        title: 'üéâ Hi·ªáu su·∫•t l·ªõp tuy·ªát v·ªùi!',
        description: `Tuy·ªát v·ªùi! ${Math.round(passingRate)}% c·ªßa l·ªõp ƒë·∫°t ƒëi·ªÉm ƒë·∫≠u. L·ªõp h·ªçc ƒë√£ hi·ªÉu b√†i r·∫•t t·ªët!`,
        priority: 1
      });
    } else if (passingRate >= 80) {
      insights.push({
        type: 'info',
        icon: <CheckCircleOutlined />,
        title: 'üëç Hi·ªáu su·∫•t l·ªõp t·ªët',
        description: `T·ªët! ${Math.round(passingRate)}% c·ªßa l·ªõp ƒë·∫°t ƒëi·ªÉm ƒë·∫≠u. Ph·∫ßn l·ªõn h·ªçc sinh ƒë√£ n·∫Øm v·ªØng b√†i h·ªçc.`,
        priority: 2
      });
    } else if (passingRate >= 60) {
      insights.push({
        type: 'warning',
        icon: <InfoCircleOutlined />,
        title: 'üìö Hi·ªáu su·∫•t trung b√¨nh',
        description: `${Math.round(passingRate)}% c·ªßa l·ªõp ƒë·∫°t ƒëi·ªÉm ƒë·∫≠u. C·∫ßn h·ªó tr·ª£ th√™m m·ªôt s·ªë h·ªçc sinh.`,
        priority: 3
      });
    } else {
      insights.push({
        type: 'error',
        icon: <WarningOutlined />,
        title: 'üö® C·∫ßn ch√∫ √Ω ƒë·∫øn hi·ªáu su·∫•t',
        description: `Ch·ªâ ${Math.round(passingRate)}% ƒë·∫°t ƒëi·ªÉm ƒë·∫≠u. C·∫ßn xem l·∫°i ph∆∞∆°ng ph√°p gi·∫£ng d·∫°y ho·∫∑c n·ªôi dung b√†i h·ªçc.`,
        priority: 1,
        actionable: true,
        suggestions: [
          'T·ªï ch·ª©c bu·ªïi √¥n t·∫≠p cho l·ªõp',
          'Ph√¢n t√≠ch c√¢u h·ªèi h·ªçc sinh hay sai',
          'T·∫°o b√†i t·∫≠p b·ªï sung',
          'G·∫∑p ri√™ng h·ªçc sinh y·∫øu'
        ]
      });
    }

    // 2. Grade Distribution Insights
    if (gradeDistribution && Array.isArray(gradeDistribution)) {
      const aGrades = gradeDistribution.find(g => g.label && g.label.includes('A (90-100%)'));
      const fGrades = gradeDistribution.find(g => g.label && g.label.includes('F (<60%)'));

      if (aGrades && (aGrades.percentage || 0) > 25) {
        insights.push({
          type: 'info',
          icon: <StarOutlined />,
          title: '‚≠ê Nh·∫≠n di·ªán h·ªçc sinh ƒë·∫°t ƒëi·ªÉm cao',
          description: `Tuy·ªát v·ªùi! ${aGrades.count || 0} h·ªçc sinh (${Math.round((aGrades.percentage || 0) * 10) / 10}%) ƒë·∫°t lo·∫°i A. C√≥ th·ªÉ c√¢n nh·∫Øc tƒÉng ƒë·ªô kh√≥ cho l·∫ßn sau.`,
          priority: 2
        });
      }

      if (fGrades && (fGrades.percentage || 0) > 20) {
        insights.push({
          type: 'warning',
          icon: <WarningOutlined />,
          title: 'üìâ Nhi·ªÅu h·ªçc sinh g·∫∑p kh√≥ khƒÉn',
          description: `${fGrades.count || 0} h·ªçc sinh (${Math.round((fGrades.percentage || 0) * 10) / 10}%) ƒë·∫°t ƒëi·ªÉm F. C·∫ßn h·ªó tr·ª£ ƒë·∫∑c bi·ªát.`,
          priority: 1,
          actionable: true,
          suggestions: [
            'T·ªï ch·ª©c l·ªõp h·ªçc b√π',
            'Cung c·∫•p t√†i li·ªáu b·ªï tr·ª£',
            'Gh√©p nh√≥m h·ªçc t·∫≠p',
            'T∆∞ v·∫•n h·ªçc t·∫≠p c√° nh√¢n'
          ]
        });
      }
    }

    // 3. Perfect Scores
    if (performanceInsights && (performanceInsights.perfectScores || 0) > 0) {
      insights.push({
        type: 'success',
        icon: <TrophyOutlined />,
        title: 'üèÜ ƒê·∫°t ƒëi·ªÉm tuy·ªát ƒë·ªëi',
        description: `${performanceInsights.perfectScores} h·ªçc sinh ƒë·∫°t ƒëi·ªÉm tuy·ªát ƒë·ªëi ${maxGrade}/${maxGrade}! Xu·∫•t s·∫Øc!`,
        priority: 2
      });
    }

    // 4. Late Submission Analysis
    const lateCount = Number(overview.lateCount) || 0;
    const submittedCount = Number(overview.submittedCount) || 1;
    
    if (lateCount > submittedCount * 0.3) {
      insights.push({
        type: 'warning',
        icon: <ClockCircleOutlined />,
        title: '‚è∞ T·ª∑ l·ªá n·ªôp mu·ªôn cao',
        description: `${lateCount} b√†i n·ªôp mu·ªôn (${Math.round((lateCount/submittedCount)*100)}%). C·∫ßn nh·∫Øc nh·ªü v·ªÅ deadline v√† qu·∫£n l√Ω th·ªùi gian.`,
        priority: 2,
        actionable: true,
        suggestions: [
          'G·ª≠i reminder tr∆∞·ªõc deadline',
          'T·∫°o deadline trung gian',
          'H∆∞·ªõng d·∫´n qu·∫£n l√Ω th·ªùi gian',
          'ƒêi·ªÅu ch·ªânh timeline assignment'
        ]
      });
    }

    // 5. Completion Rate
    const completionRate = Number(overview.completionRate) || 0;
    if (completionRate < 90) {
      const missingCount = Number(overview.missingCount) || 0;
      insights.push({
        type: 'warning',
        icon: <InfoCircleOutlined />,
        title: 'üìù B√†i n·ªôp ch∆∞a ho√†n th√†nh',
        description: `${missingCount} h·ªçc sinh ch∆∞a n·ªôp b√†i (${(100-completionRate).toFixed(1)}% ch∆∞a ho√†n th√†nh). C·∫ßn follow-up.`,
        priority: 1,
        actionable: true,
        suggestions: [
          'Li√™n h·ªá h·ªçc sinh ch∆∞a n·ªôp b√†i',
          'Ki·ªÉm tra l√Ω do v·∫Øng m·∫∑t',
          'Cung c·∫•p h·ªó tr·ª£ k·ªπ thu·∫≠t',
          'Gia h·∫°n cho tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát'
        ]
      });
    }

    // 6. Grade Variance Analysis
    const standardDeviation = Number(overview.standardDeviation) || 0;
    if (standardDeviation > maxGrade * 0.25) {
      insights.push({
        type: 'info',
        icon: <InfoCircleOutlined />,
        title: 'üìä ƒê·ªô l·ªách chu·∫©n ƒëi·ªÉm cao',
        description: `ƒêi·ªÉm s·ªë ph√¢n t√°n cao (ƒë·ªô l·ªách chu·∫©n: ${standardDeviation.toFixed(1)}). C√≥ s·ª± ch√™nh l·ªách l·ªõn gi·ªØa h·ªçc sinh gi·ªèi v√† y·∫øu.`,
        priority: 2,
        actionable: true,
        suggestions: [
          'Ph√¢n lo·∫°i h·ªçc sinh theo tr√¨nh ƒë·ªô',
          'T·∫°o b√†i t·∫≠p ƒëa c·∫•p ƒë·ªô',
          'TƒÉng c∆∞·ªùng h·ªó tr·ª£ h·ªçc sinh y·∫øu',
          'Th·ª≠ nghi·ªám ph∆∞∆°ng ph√°p d·∫°y h·ªçc kh√°c nhau'
        ]
      });
    }

    // Sort by priority and return
    return insights.sort((a, b) => a.priority - b.priority);
  };

  const insights = generateInsights();

  const getInsightColor = (type) => {
    switch (type) {
      case 'success': return 'success';
      case 'error': return 'error';
      case 'warning': return 'warning';
      default: return 'info';
    }
  };

  const renderActionableSuggestions = (suggestions) => {
    if (!suggestions || suggestions.length === 0) return null;

    return (
      <div className="mt-3 p-3 bg-gray-50 rounded-lg">
        <Text strong className="text-sm">üí° G·ª£i √Ω h√†nh ƒë·ªông:</Text>
        <ul className="mt-2 ml-4 text-sm">
          {suggestions.map((suggestion, index) => (
            <li key={`suggestion-${index}`} className="mb-1">‚Ä¢ {suggestion}</li>
          ))}
        </ul>
      </div>
    );
  };

  const renderQuickStats = () => (
    <Row gutter={[16, 16]} className="mb-6">
      <Col xs={12} sm={6}>
        <Card size="small" className="text-center">
          <Statistic
            title="X·∫øp h·∫°ng l·ªõp"
            value={
              (overview.passingRate || 0) >= 90 ? 'A+' : 
              (overview.passingRate || 0) >= 80 ? 'A' : 
              (overview.passingRate || 0) >= 70 ? 'B' : 
              (overview.passingRate || 0) >= 60 ? 'C' : 'D'
            }
            valueStyle={{ 
              color: (overview.passingRate || 0) >= 80 ? '#52c41a' : 
                     (overview.passingRate || 0) >= 60 ? '#faad14' : '#ff4d4f',
              fontSize: '24px'
            }}
            prefix={<TrophyOutlined />}
          />
        </Card>
      </Col>
      <Col xs={12} sm={6}>
        <Card size="small" className="text-center">
          <Statistic
            title="Ho√†n th√†nh"
            value={Math.round(overview.completionRate || 0)}
            suffix="%"
            valueStyle={{ color: (overview.completionRate || 0) >= 90 ? '#52c41a' : '#faad14' }}
            prefix={<CheckCircleOutlined />}
          />
        </Card>
      </Col>
      <Col xs={12} sm={6}>
        <Card size="small" className="text-center">
          <Statistic
            title="ƒê√∫ng h·∫°n"
            value={
              (overview.submittedCount || 0) > 0 ? 
              Math.round(((Number(overview.submittedCount) - Number(overview.lateCount || 0)) / Number(overview.submittedCount)) * 100) : 
              100
            }
            suffix="%"
            valueStyle={{ color: '#1890ff' }}
            prefix={<ClockCircleOutlined />}
          />
        </Card>
      </Col>
      <Col xs={12} sm={6}>
        <Card size="small" className="text-center">
          <Statistic
            title="Xu·∫•t s·∫Øc"
            value={
              performanceInsights && (overview.gradedCount || 0) > 0 ? 
              Math.round(((performanceInsights.excellentPerformance || 0) / (overview.gradedCount || 1)) * 100) : 
              0
            }
            suffix="%"
            valueStyle={{ color: '#722ed1' }}
            prefix={<StarOutlined />}
          />
        </Card>
      </Col>
    </Row>
  );

  if (insights.length === 0) {
    return (
      <Card>
        <div className="text-center py-8">
          <InfoCircleOutlined style={{ fontSize: '48px', color: '#d9d9d9' }} />
          <Title level={4} type="secondary" className="mt-4">
            Th·ªëng k√™ ph√¢n t√≠ch
          </Title>
          <Text type="secondary">
            Th·ªëng k√™ s·∫Ω ƒë∆∞·ª£c t·∫°o khi d·ªØ li·ªáu c√≥ s·∫µn.
          </Text>
        </div>
      </Card>
    );
  }

  return (
    <div className="analytics-insights">
      <div className="mb-6">
        <div className="flex items-center justify-between mb-4">
          <div>
            <Title level={4} className="mb-1">
              üîç C√°c th√¥ng tin quan tr·ªçng & G·ª£i √Ω
            </Title>
            <Text type="secondary">
              Ph√¢n t√≠ch AI v√† g·ª£i √Ω h√†nh ƒë·ªông c√≥ t√°c ƒë·ªông
            </Text>
          </div>
          <Badge count={insights.length} showZero color="#1890ff" />
        </div>
        
        {renderQuickStats()}
      </div>

      <Row gutter={[16, 16]}>
        {insights.map((insight, index) => (
          <Col xs={24} lg={insight.actionable ? 24 : 12} key={`insight-${index}`}>
            <Alert
              message={insight.title}
              description={
                <div>
                  <div>{insight.description}</div>
                  {insight.actionable && renderActionableSuggestions(insight.suggestions)}
                </div>
              }
              type={getInsightColor(insight.type)}
              icon={insight.icon}
              showIcon
              className={`${insight.priority === 1 ? 'border-2 shadow-md' : ''}`}
              action={
                insight.actionable && (
                  <Space>
                    <Tag color="blue">Y√™u c·∫ßu h√†nh ƒë·ªông</Tag>
                    {insight.priority === 1 && <Tag color="red">M·ª©c ƒë·ªô ∆∞u ti√™n cao</Tag>}
                  </Space>
                )
              }
            />
          </Col>
        ))}
      </Row>

      {/* Performance Trend Indicator */}
      <Card className="mt-6" size="small">
        <div className="flex items-center justify-between">
          <div>
            <Text strong>ƒê√°nh gi√° chung:</Text>
            <div className="mt-1">
              {(overview.passingRate || 0) >= 85 ? (
                <Space>
                  <RiseOutlined style={{ color: '#52c41a' }} />
                  <Text type="success">L·ªõp ƒëang ho·∫°t ƒë·ªông tuy·ªát v·ªùi</Text>
                  <Tag color="green">Hi·ªÉu bi·∫øt s√¢u s·∫Øc</Tag>
                </Space>
              ) : (overview.passingRate || 0) >= 70 ? (
                <Space>
                  <ThunderboltOutlined style={{ color: '#1890ff' }} />
                  <Text>L·ªõp ƒëang ho·∫°t ƒë·ªông t·ªët</Text>
                  <Tag color="blue">Ti·∫øn b·ªô t·ªët</Tag>
                </Space>
              ) : (
                <Space>
                  <FallOutlined style={{ color: '#ff4d4f' }} />
                  <Text type="danger">L·ªõp c·∫ßn h·ªó tr·ª£ th√™m</Text>
                  <Tag color="red">C·∫ßn can thi·ªáp</Tag>
                </Space>
              )}
            </div>
          </div>
          <Progress
            type="circle"
            percent={Math.round(overview.passingRate || 0)}
            size={80}
            strokeColor={
              (overview.passingRate || 0) >= 85 ? '#52c41a' : 
              (overview.passingRate || 0) >= 70 ? '#1890ff' : '#ff4d4f'
            }
          />
        </div>
      </Card>
    </div>
  );
};

export default AnalyticsInsights;