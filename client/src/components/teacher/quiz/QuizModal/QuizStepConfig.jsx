import React from 'react';
import { Card, Row, Col, Form, DatePicker, Checkbox, Typography, Alert } from 'antd';
import dayjs from 'dayjs';

const { Title } = Typography;

const QuizStepConfig = () => (
  <div>
    <Title level={4}>‚öôÔ∏è C·∫•u h√¨nh b√†i thi</Title>
    
    <Row gutter={16}>
      <Col span={12}>
        <Card title="‚è∞ Th·ªùi gian" size="small" className="mb-4">
          <Form.Item 
            name="startTime" 
            require
            label="Th·ªùi gian b·∫Øt ƒë·∫ßu"
            rules={[
              { required: true, message: 'Vui l√≤ng ch·ªçn th·ªùi gian b·∫Øt ƒë·∫ßu' },
              {
                validator: (_, value) => {
                  if (!value) return Promise.resolve();
                  
                  const now = dayjs();
                  if (value.isBefore(now)) {
                    return Promise.reject(new Error('Th·ªùi gian b·∫Øt ƒë·∫ßu kh√¥ng th·ªÉ trong qu√° kh·ª©'));
                  }
                  return Promise.resolve();
                }
              }
            ]}
          >
            <DatePicker
              showTime
              format="DD/MM/YYYY HH:mm"
              style={{ width: '100%' }}
              placeholder="Ch·ªçn th·ªùi gian b·∫Øt ƒë·∫ßu"
              showToday={false}
              disabledDate={(current) => current && current < dayjs().startOf('day')}
            />
          </Form.Item>
          
          <Form.Item 
            name="endTime" 
            label="Th·ªùi gian k·∫øt th√∫c"
            dependencies={['startTime']}
            rules={[
              {
                required: true,
                message: 'Vui l√≤ng ch·ªçn th·ªùi gian k·∫øt th√∫c'
              },
              ({ getFieldValue }) => ({
                validator: (_, value) => {
                  if (!value) return Promise.resolve();
                  
                  const startTime = getFieldValue('startTime');
                  if (startTime && value.isBefore(startTime)) {
                    return Promise.reject(new Error('Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu'));
                  }
                  
                  const now = dayjs();
                  if (value.isBefore(now)) {
                    return Promise.reject(new Error('Th·ªùi gian k·∫øt th√∫c kh√¥ng th·ªÉ trong qu√° kh·ª©'));
                  }
                  
                  return Promise.resolve();
                }
              })
            ]}
          >
            <DatePicker
              showTime
              format="DD/MM/YYYY HH:mm"
              style={{ width: '100%' }}
              placeholder="Ch·ªçn th·ªùi gian k·∫øt th√∫c"
              showToday={false}
              disabledDate={(current) => current && current < dayjs().startOf('day')}
            />
          </Form.Item>
          
          <Alert
            message="L∆∞u √Ω"
            description="N·∫øu kh√¥ng ƒë·∫∑t th·ªùi gian, b√†i thi s·∫Ω lu√¥n kh·∫£ d·ª•ng"
            type="info"
            showIcon
            size="small"
          />
        </Card>
      </Col>
      
      <Col span={12}>
        <Card title="üîí Quy·ªÅn truy c·∫≠p" size="small" className="mb-4">
          <Form.Item name="showResults" valuePropName="checked">
            <Checkbox>Hi·ªán k·∫øt qu·∫£ sau khi l√†m xong</Checkbox>
          </Form.Item>
          
          <Form.Item name="allowReview" valuePropName="checked">
            <Checkbox>Cho ph√©p xem l·∫°i ƒë√°p √°n</Checkbox>
          </Form.Item>
          
          <Form.Item name="shuffleQuestions" valuePropName="checked">
            <Checkbox>Tr·ªôn th·ª© t·ª± c√¢u h·ªèi</Checkbox>
          </Form.Item>
          
          <Form.Item name="shuffleOptions" valuePropName="checked">
            <Checkbox>Tr·ªôn th·ª© t·ª± ƒë√°p √°n</Checkbox>
          </Form.Item>
          
          <Alert
            message="Khuy·∫øn ngh·ªã"
            description="N√™n b·∫≠t t√≠nh nƒÉng tr·ªôn c√¢u h·ªèi ƒë·ªÉ tƒÉng t√≠nh b·∫£o m·∫≠t"
            type="warning"
            showIcon
            size="small"
          />
        </Card>
      </Col>
    </Row>
    
    <Card title="üõ°Ô∏è Ch·ªëng gian l·∫≠n" size="small" className="d-none" style={{display: "none"}}>
      <Row gutter={16}>
        <Col span={12}>
          <Form.Item name="lockdownBrowser" valuePropName="checked">
            <Checkbox>Ch·∫ø ƒë·ªô to√†n m√†n h√¨nh (kh√≥a tr√¨nh duy·ªát)</Checkbox>
          </Form.Item>
          
          <Form.Item name="preventCopyPaste" valuePropName="checked">
            <Checkbox>Ch·∫∑n copy/paste</Checkbox>
          </Form.Item>
        </Col>
        
        <Col span={12}>
          <Form.Item name="detectTabSwitch" valuePropName="checked">
            <Checkbox>Ph√°t hi·ªán chuy·ªÉn tab</Checkbox>
          </Form.Item>
          
          <Form.Item name="randomizeQuestions" valuePropName="checked">
            <Checkbox>Random c√¢u h·ªèi cho m·ªói h·ªçc sinh</Checkbox>
          </Form.Item>
        </Col>
      </Row>
      
      <Alert
        message="C·∫£nh b√°o"
        description="C√°c t√≠nh nƒÉng ch·ªëng gian l·∫≠n c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn tr·∫£i nghi·ªám ng∆∞·ªùi d√πng. H√£y c√¢n nh·∫Øc k·ªπ tr∆∞·ªõc khi s·ª≠ d·ª•ng."
        type="warning"
        showIcon
        size="small"
      />
    </Card>
  </div>
);

export default QuizStepConfig;