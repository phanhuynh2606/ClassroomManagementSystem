import React, { useState, useEffect } from 'react';
import {
  Modal,
  Form,
  Input,
  DatePicker,
  Select,
  Upload,
  Switch,
  InputNumber,
  Typography,
  Space,
  Card,
  Row,
  Col,
  Divider,
  message,
  Radio,
  Checkbox,
  Button,
  Tooltip,
  Alert
} from 'antd';
import {
  UploadOutlined,
  FileTextOutlined,
  CalendarOutlined,
  PaperClipOutlined,
  InfoCircleOutlined,
  SettingOutlined
} from '@ant-design/icons';
import moment from 'moment';
import CustomQuillEditor from '../../CustomQuillEditor';
import 'react-quill/dist/quill.snow.css';

const { Title, Text } = Typography;
const { TextArea } = Input;
const { Option } = Select;
const { RangePicker } = DatePicker;

const AssignmentCreateModal = ({ 
  visible, 
  onCancel, 
  onOk, 
  loading = false,
  initialValues = null,
  mode = 'create' // 'create' | 'edit'
}) => {
  const [form] = Form.useForm();
  const [submissionType, setSubmissionType] = useState('both');
  const [allowLateSubmission, setAllowLateSubmission] = useState(false);
  const [attachments, setAttachments] = useState([]);
  const [description, setDescription] = useState('');
  const [visibility, setVisibility] = useState('published');
  
  // Missing submission policy states
  const [autoGradeWhenOverdue, setAutoGradeWhenOverdue] = useState(false);
  const [allowBulkGrading, setAllowBulkGrading] = useState(true);
  const [notifyStudentsOfMissingSubmission, setNotifyStudentsOfMissingSubmission] = useState(true);

  // Handle initialValues for edit mode
  useEffect(() => {
    if (initialValues?.description) {
      setDescription(initialValues.description);
    }
    if (initialValues?.allowLateSubmission !== undefined) {
      setAllowLateSubmission(initialValues.allowLateSubmission);
    }
    if (initialValues?.submissionSettings?.type) {
      setSubmissionType(initialValues.submissionSettings.type);
    }
    if (initialValues?.visibility) {
      setVisibility(initialValues.visibility);
    }
    // Handle missing submission policy
    if (initialValues?.missingSubmissionPolicy) {
      const policy = initialValues.missingSubmissionPolicy;
      setAutoGradeWhenOverdue(policy.autoGradeWhenOverdue || false);
      setAllowBulkGrading(policy.allowBulkGrading !== undefined ? policy.allowBulkGrading : true);
      setNotifyStudentsOfMissingSubmission(policy.notifyStudentsOfMissingSubmission !== undefined ? policy.notifyStudentsOfMissingSubmission : true);
    }
  }, [initialValues]);

  const handleOk = () => {
    form.validateFields().then(values => {
      // Process form data
      let publishDate = null;
      if (values.visibility === 'published') {
        // Xu·∫•t b·∫£n ngay - set publishDate = hi·ªán t·∫°i
        publishDate = new Date().toISOString();
      } else if (values.visibility === 'scheduled' && values.publishDate) {
        // L√™n l·ªãch xu·∫•t b·∫£n - s·ª≠ d·ª•ng publishDate t·ª´ form
        publishDate = values.publishDate.toISOString();
      }
      // B·∫£n nh√°p - publishDate = null

      const assignmentData = {
        ...values,
        description: description, // Use description from state (rich text content)
        dueDate: values.dueDate?.toISOString(),
        publishDate: publishDate,
        attachments: attachments,
        allowLateSubmission: allowLateSubmission,
        maxLateDays: values.maxLateDays || 7,
        latePenalty: values.latePenalty || 0,
        submissionSettings: {
          type: submissionType,
          maxFileSize: values.maxFileSize || 10,
          allowedFileTypes: values.allowedFileTypes || [],
          textSubmissionRequired: values.textSubmissionRequired || false,
          fileSubmissionRequired: values.fileSubmissionRequired || false
        },
        missingSubmissionPolicy: {
          autoGradeWhenOverdue: autoGradeWhenOverdue,
          autoGradeValue: values.autoGradeValue || 0,
          daysAfterDueForAutoGrade: values.daysAfterDueForAutoGrade || 1,
          allowBulkGrading: allowBulkGrading,
          notifyStudentsOfMissingSubmission: notifyStudentsOfMissingSubmission,
          reminderDaysBeforeDue: values.reminderDaysBeforeDue.sort((a, b) => a - b) || [1, 3]
        }
      };
      
      onOk(assignmentData);
    }).catch(error => {
      console.error('Validation failed:', error);
    });
  };

  const handleCancel = () => {
    form.resetFields();
    setAttachments([]);
    setSubmissionType('both');
    setAllowLateSubmission(false);
    setDescription('');
    setVisibility('published');
    // Reset missing submission policy states
    setAutoGradeWhenOverdue(false);
    setAllowBulkGrading(true);
    setNotifyStudentsOfMissingSubmission(true);
    onCancel();
  };

  const handleUploadChange = ({ fileList }) => {
    setAttachments(fileList);
  };

  const beforeUpload = (file) => {
    const isValidSize = file.size / 1024 / 1024 < 50; // 50MB limit
    if (!isValidSize) {
      message.error('File size must be less than 50MB!');
    }
    return false; // Prevent auto upload
  };

  return (
    <Modal
      title={
        <Space>
          <FileTextOutlined />
          {mode === 'create' ? 'T·∫°o b√†i t·∫≠p m·ªõi' : 'Ch·ªânh s·ª≠a b√†i t·∫≠p'}
        </Space>
      }
      open={visible}
      onOk={handleOk}
      onCancel={handleCancel}
      confirmLoading={loading}
      centered
      width={`85vw`}
      okText={mode === 'create' ? 'T·∫°o b√†i t·∫≠p' : 'C·∫≠p nh·∫≠t'}
      cancelText="H·ªßy"
      style={{ top: 20 }}
    >
      <Form
        form={form}
        layout="vertical"
        initialValues={{
          totalPoints: 100,
          allowLateSubmission: false,
          maxLateDays: 7, // Default max late days
          latePenalty: 10,
          maxFileSize: 10,
          visibility: 'published',
          // Missing submission policy defaults
          autoGradeWhenOverdue: false,
          autoGradeValue: 0,
          daysAfterDueForAutoGrade: 1,
          allowBulkGrading: true,
          notifyStudentsOfMissingSubmission: true,
          reminderDaysBeforeDue: [3, 1],
          ...initialValues
        }}
      >
        <Row gutter={24}>
          {/* LEFT COLUMN */}
          <Col span={12}>
            {/* Basic Information */}
            <Card title="üìù Th√¥ng tin c∆° b·∫£n" size="small" className="mb-4">
          <Form.Item
            name="title"
            label="Ti√™u ƒë·ªÅ b√†i t·∫≠p"
            rules={[
              { required: true, message: 'Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ b√†i t·∫≠p' },
              { min: 5, message: 'Ti√™u ƒë·ªÅ ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±' }
            ]}
          >
            <Input placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i t·∫≠p" />
          </Form.Item>

          <Form.Item
            name="description"
            label={
              <Space>
                <span>M√¥ t·∫£ & y√™u c·∫ßu</span>
                <Tooltip title="S·ª≠ d·ª•ng tr√¨nh so·∫°n th·∫£o ƒë·ªÉ ƒë·ªãnh d·∫°ng n·ªôi dung: ƒë√°nh s·ªë, bullet points, in ƒë·∫≠m, in nghi√™ng, ch√®n link, v.v...">
                  <InfoCircleOutlined style={{ color: '#1890ff' }} />
                </Tooltip>
              </Space>
            }
            rules={[
              { required: true, message: 'Vui l√≤ng nh·∫≠p m√¥ t·∫£ b√†i t·∫≠p' },
              { 
                validator: (_, value) => {
                  // Remove HTML tags to check actual text length
                  const textContent = description.replace(/<[^>]*>/g, '').trim();
                  if (textContent.length < 20) {
                    return Promise.reject(new Error('M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 20 k√Ω t·ª±'));
                  }
                  return Promise.resolve();
                }
              }
            ]}
          >
            <CustomQuillEditor
              value={description}
              onChange={(content) => {
                setDescription(content);
                form.setFieldsValue({ description: content });
              }}
              placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt, y√™u c·∫ßu v√† h∆∞·ªõng d·∫´n l√†m b√†i..."
              style={{ 
                minHeight: '200px',
                backgroundColor: '#fff',
                border: '1px solid #d9d9d9',
                borderRadius: '4px'
              }}
              modules={{
                toolbar: {
                  container: [
                    [{ 'header': [1, 2, 3, false] }],
                    ['bold', 'italic', 'underline', 'strike'],
                    [{ 'color': [] }, { 'background': [] }],
                    [{ 'list': 'ordered'}, { 'list': 'bullet' }, { 'list': 'check' }],
                    [{ 'indent': '-1'}, { 'indent': '+1' }],
                    [{ 'align': [] }],
                    ['link', 'blockquote', 'code-block'],
                    ['clean']
                  ],
                },
              }}
              formats={[
                'header', 'bold', 'italic', 'underline', 'strike',
                'list', 'bullet', 'check', 'indent', 'link', 'blockquote',
                'code-block', 'color', 'background', 'align'
              ]}
            />
            <div style={{ marginTop: 8 }}>
              <Text type="secondary" style={{ fontSize: 12 }}>
                üí° Tip: S·ª≠ d·ª•ng c√°c c√¥ng c·ª• ƒë·ªãnh d·∫°ng ƒë·ªÉ l√†m n·ªïi b·∫≠t y√™u c·∫ßu quan tr·ªçng, t·∫°o danh s√°ch c√¥ng vi·ªác, ho·∫∑c ch√®n code m·∫´u
              </Text>
            </div>
          </Form.Item>

          <Form.Item
            name="instructions"
            label="H∆∞·ªõng d·∫´n b·ªï sung"
          >
            <TextArea
              rows={3}
              placeholder="H∆∞·ªõng d·∫´n c√°ch l√†m b√†i, format n·ªôp b√†i, ti√™u ch√≠ ch·∫•m ƒëi·ªÉm..."
              showCount
              maxLength={1000}
            />
          </Form.Item>
        </Card>

            {/* Timing & Scoring */}
            <Card title="‚è∞ Th·ªùi gian & ƒêi·ªÉm s·ªë" size="small" className="mb-4">
          <Row gutter={16}>
            <Col span={8}>
              <Form.Item
                name="totalPoints"
                label="T·ªïng ƒëi·ªÉm"
                rules={[
                  { required: true, message: 'Vui l√≤ng nh·∫≠p t·ªïng ƒëi·ªÉm' },
                  { type: 'number', min: 1, max: 1000, message: 'ƒêi·ªÉm t·ª´ 1-1000' }
                ]}
              >
                <InputNumber
                  min={1}
                  max={1000}
                  style={{ width: '100%' }}
                  placeholder="100"
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="dueDate"
                label="H·∫°n n·ªôp b√†i"
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn h·∫°n n·ªôp b√†i' }]}
              >
                <DatePicker
                  showTime
                  format="DD/MM/YYYY HH:mm"
                  placeholder="Ch·ªçn th·ªùi gian"
                  style={{ width: '100%' }}
                  disabledDate={(current) => current && current < moment().endOf('day')}
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="publishDate"
                label={
                  <Space>
                    <span>Th·ªùi gian c√¥ng b·ªë</span>
                    {visibility === 'scheduled' && (
                      <Tooltip title="B√†i t·∫≠p s·∫Ω t·ª± ƒë·ªông xu·∫•t hi·ªán trong danh s√°ch b√†i t·∫≠p c·ªßa h·ªçc vi√™n v√†o th·ªùi ƒëi·ªÉm n√†y">
                        <InfoCircleOutlined style={{ color: '#1890ff' }} />
                      </Tooltip>
                    )}
                  </Space>
                }
                rules={[
                  {
                    required: visibility === 'scheduled',
                    message: 'Vui l√≤ng ch·ªçn th·ªùi gian c√¥ng b·ªë'
                  },
                  {
                    validator: (_, value) => {
                      if (visibility === 'scheduled' && value && value.isBefore(moment())) {
                        return Promise.reject(new Error('Th·ªùi gian c√¥ng b·ªë ph·∫£i trong t∆∞∆°ng lai'));
                      }
                      return Promise.resolve();
                    }
                  }
                ]}
                extra={visibility === 'scheduled' && 
                  <Text type="secondary" style={{ fontSize: 12 }}>
                    ƒê·ªãnh d·∫°ng: DD/MM/YYYY HH:mm (24 gi·ªù)
                  </Text>
                }
              >
                <DatePicker
                  showTime
                  format="DD/MM/YYYY HH:mm"
                  placeholder={visibility === 'scheduled' ? 'Ch·ªçn th·ªùi gian' : 'Ngay l·∫≠p t·ª©c'}
                  style={{ width: '100%' }}
                  disabled={visibility !== 'scheduled'}
                  disabledDate={(current) => current && current < moment().startOf('day')}
                />
              </Form.Item>
            </Col>
          </Row>
        </Card>
        {/* Attachments */}
        <Card title="üìé File ƒë√≠nh k√®m" size="small" className="mb-4">
              <Form.Item
                name="attachments"
                label="T√†i li·ªáu h∆∞·ªõng d·∫´n (optional)"
              >
                <Upload.Dragger
                  multiple
                  beforeUpload={beforeUpload}
                  onChange={handleUploadChange}
                  fileList={attachments}
                  accept=".pdf,.doc,.docx,.ppt,.pptx,.xls,.xlsx,.txt,.zip,.rar"
                >
                  <p className="ant-upload-drag-icon">
                    <PaperClipOutlined />
                  </p>
                  <p className="ant-upload-text">
                    K√©o th·∫£ file ho·∫∑c click ƒë·ªÉ ch·ªçn
                  </p>
                  <p className="ant-upload-hint">
                    H·ªó tr·ª£: PDF, Word, Excel, PowerPoint, ZIP, RAR (t·ªëi ƒëa 50MB m·ªói file)
                  </p>
                </Upload.Dragger>
              </Form.Item>
            </Card>
    {/* Submission Settings */}
    <Card title="üì§ C√†i ƒë·∫∑t n·ªôp b√†i" size="small" className="mb-4">
          <Form.Item
            name="submissionType"
            label="H√¨nh th·ª©c n·ªôp b√†i"
            rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn h√¨nh th·ª©c n·ªôp b√†i' }]}
          >
            <Radio.Group 
              value={submissionType}
              onChange={(e) => setSubmissionType(e.target.value)}
            >
              <Radio value="text">Ch·ªâ nh·∫≠p text tr·ª±c ti·∫øp</Radio>
              <Radio value="file">Ch·ªâ upload file</Radio>
              <Radio value="both">C·∫£ text v√† file</Radio>
            </Radio.Group>
          </Form.Item>

          {(submissionType === 'file' || submissionType === 'both') && (
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item
                  name="maxFileSize"
                  label="K√≠ch th∆∞·ªõc file t·ªëi ƒëa (MB)"
                >
                  <InputNumber
                    min={1}
                    max={100}
                    style={{ width: '100%' }}
                    placeholder="10"
                  />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item
                  name="allowedFileTypes"
                  label="Lo·∫°i file cho ph√©p"
                >
                  <Select
                    mode="multiple"
                    placeholder="T·∫•t c·∫£ file types"
                  >
                    <Option value="pdf">PDF</Option>
                    <Option value="doc">Word</Option>
                    <Option value="xls">Excel</Option>
                    <Option value="ppt">PowerPoint</Option>
                    <Option value="txt">Text</Option>
                    <Option value="zip">ZIP/RAR</Option>
                    <Option value="image">Images</Option>
                  </Select>
                </Form.Item>
              </Col>
            </Row>
          )}

          <Divider />

          <Row gutter={16}>
            <Col span={24}>
              <Form.Item name="allowLateSubmission" valuePropName="checked">
                <Checkbox 
                  onChange={(e) => {
                    setAllowLateSubmission(e.target.checked);
                    if (!e.target.checked) {
                      // Reset auto-grade settings when disabling late submission
                      setAutoGradeWhenOverdue(false);
                      form.setFieldsValue({
                        autoGradeWhenOverdue: false,
                        maxLateDays: 7,
                        daysAfterDueForAutoGrade: 1
                      });
                    }
                  }}
                >
                  Cho ph√©p n·ªôp mu·ªôn
                </Checkbox>
              </Form.Item>
            </Col>
          </Row>
          
          {allowLateSubmission && (
            <Alert
              message="‚ö†Ô∏è Conflict Warning v·ªõi Auto-Grade"
              description="Khi cho ph√©p n·ªôp mu·ªôn, b·∫°n c·∫ßn c√†i ƒë·∫∑t s·ªë ng√†y t·ªëi ƒëa ƒë·ªÉ tr√°nh conflict v·ªõi ch√≠nh s√°ch auto-grade. Auto-grade ch·ªâ c√≥ th·ªÉ th·ª±c hi·ªán sau khi h·∫øt th·ªùi gian n·ªôp mu·ªôn."
              type="warning"
              showIcon
              className="mb-4"
            />
          )}
          
          {allowLateSubmission && (
            <Row gutter={16}>
              <Col span={8}>
                <Form.Item
                  name="maxLateDays"
                  label="S·ªë ng√†y t·ªëi ƒëa ƒë∆∞·ª£c n·ªôp mu·ªôn"
                  rules={[
                    { required: true, message: 'B·∫Øt bu·ªôc nh·∫≠p s·ªë ng√†y!' },
                    { type: 'number', min: 1, max: 30, message: 'T·ª´ 1-30 ng√†y' }
                  ]}
                >
                  <InputNumber
                    min={1}
                    max={30}
                    style={{ width: '100%' }}
                    placeholder="7"
                    addonAfter="ng√†y"
                    onChange={(value) => {
                      // Auto-adjust auto-grade days when max late days changes
                      const currentAutoGradeDays = form.getFieldValue('daysAfterDueForAutoGrade');
                      if (value && autoGradeWhenOverdue && currentAutoGradeDays <= value) {
                        const newAutoGradeDays = value + 1;
                        form.setFieldsValue({
                          daysAfterDueForAutoGrade: newAutoGradeDays
                        });
                        message.info(`Auto-grade ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh th√†nh ${newAutoGradeDays} ng√†y ƒë·ªÉ tr√°nh conflict`);
                      }
                    }}
                  />
                </Form.Item>
              </Col>
              <Col span={8}>
                <Form.Item
                  name="latePenalty"
                  label="Ph·∫°t ƒëi·ªÉm n·ªôp mu·ªôn (%/ng√†y)"
                >
                  <InputNumber
                    min={0}
                    max={100}
                    style={{ width: '100%' }}
                    placeholder="10"
                    addonAfter="%"
                  />
                </Form.Item>
              </Col>
              <Col span={8}>
                <div className="text-center p-3 bg-blue-50 rounded border">
                  <Text strong className="block text-blue-700">Grace Period</Text>
                  <Text type="secondary" className="text-xs">
                    Students c√≥ {form.getFieldValue('maxLateDays') || 7} ng√†y buffer
                  </Text>
                </div>
              </Col>
            </Row>
          )}

          {submissionType === 'both' && (
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item name="textSubmissionRequired" valuePropName="checked">
                  <Checkbox>B·∫Øt bu·ªôc nh·∫≠p text</Checkbox>
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="fileSubmissionRequired" valuePropName="checked">
                  <Checkbox>B·∫Øt bu·ªôc upload file</Checkbox>
                </Form.Item>
              </Col>
            </Row>
          )}
        </Card>

          </Col>
          
          {/* RIGHT COLUMN */}
          <Col span={12}>
            

        
            {/* Publishing Settings */}
            <Card 
              title={
                <Space>
                  <span>üåê C√†i ƒë·∫∑t xu·∫•t b·∫£n</span>
                  <Tooltip title="Ki·ªÉm so√°t khi n√†o b√†i t·∫≠p hi·ªÉn th·ªã cho h·ªçc vi√™n">
                    <InfoCircleOutlined style={{ fontSize: 16, color: '#8c8c8c' }} />
                  </Tooltip>
                </Space>
              }
              size="small"
              className="mb-6 pb-0"
            >
              {visibility === 'scheduled' && (
                <div style={{ marginBottom: 16, padding: '12px', background: '#e6f7ff', borderRadius: 4, border: '1px solid #91d5ff' }}>
                  <Space direction="vertical" size={4} style={{ width: '100%' }}>
                    <Space>
                      <InfoCircleOutlined style={{ color: '#1890ff' }} />
                      <Text strong style={{ color: '#1890ff' }}>L√™n l·ªãch xu·∫•t b·∫£n</Text>
                    </Space>
                    <Text type="secondary" style={{ fontSize: 13 }}>
                      ‚Ä¢ B√†i t·∫≠p s·∫Ω t·ª± ƒë·ªông hi·ªÉn th·ªã cho h·ªçc vi√™n v√†o th·ªùi gian ƒë√£ ch·ªçn
                    </Text>
                    <Text type="secondary" style={{ fontSize: 13 }}>
                      ‚Ä¢ H·ªçc vi√™n kh√¥ng th·ªÉ xem b√†i t·∫≠p tr∆∞·ªõc th·ªùi ƒëi·ªÉm c√¥ng b·ªë
                    </Text>
                    <Text type="secondary" style={{ fontSize: 13 }}>
                      ‚Ä¢ B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a ho·∫∑c h·ªßy l·ªãch tr∆∞·ªõc khi c√¥ng b·ªë
                    </Text>
                  </Space>
                </div>
              )}
              {visibility === 'draft' && (
                <div style={{ marginBottom: 16, padding: '12px', background: '#f6f6f6', borderRadius: 4, border: '1px solid #d9d9d9' }}>
                  <Space>
                    <InfoCircleOutlined style={{ color: '#8c8c8c' }} />
                    <Text type="secondary">
                      B√†i t·∫≠p ·ªü ch·∫ø ƒë·ªô nh√°p s·∫Ω kh√¥ng hi·ªÉn th·ªã cho h·ªçc vi√™n cho ƒë·∫øn khi b·∫°n xu·∫•t b·∫£n
                    </Text>
                  </Space>
                </div>
              )}
              
              <Form.Item
                name="visibility"
                label="Tr·∫°ng th√°i"
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn tr·∫°ng th√°i' }]}
              >
                <Select
                  onChange={(value) => {
                    setVisibility(value);
                    // Clear publishDate n·∫øu kh√¥ng ph·∫£i scheduled
                    if (value !== 'scheduled') {
                      form.setFieldValue('publishDate', null);
                    }
                  }}
                >
                  <Option value="draft">
                    <Tooltip title="L∆∞u b√†i t·∫≠p nh∆∞ng ch∆∞a hi·ªÉn th·ªã cho h·ªçc vi√™n">
                      <Space>
                        <InfoCircleOutlined />
                        B·∫£n nh√°p
                      </Space>
                    </Tooltip>
                  </Option>
                  <Option value="published">
                    <Tooltip title="B√†i t·∫≠p s·∫Ω hi·ªÉn th·ªã ngay l·∫≠p t·ª©c cho h·ªçc vi√™n">
                      <Space>
                        <CalendarOutlined />
                        Xu·∫•t b·∫£n ngay
                      </Space>
                    </Tooltip>
                  </Option>
                  <Option value="scheduled">
                    <Tooltip title="B√†i t·∫≠p s·∫Ω t·ª± ƒë·ªông hi·ªÉn th·ªã v√†o th·ªùi gian ƒë√£ ƒë·ªãnh">
                      <Space>
                        <SettingOutlined />
                        L√™n l·ªãch xu·∫•t b·∫£n
                      </Space>
                    </Tooltip>
                  </Option>
                </Select>
              </Form.Item>
              
              <Form.Item
                name="tags"
                label="Tags (optional)"
                className="mb-0"
              >
                <Select
                  mode="tags"
                  placeholder="Th√™m tags ƒë·ªÉ d·ªÖ t√¨m ki·∫øm"
                >
                  <Option value="homework">B√†i t·∫≠p v·ªÅ nh√†</Option>
                  <Option value="project">D·ª± √°n</Option>
                  <Option value="lab">Th·ª±c h√†nh</Option>
                  <Option value="essay">Lu·∫≠n vƒÉn</Option>
                </Select>
              </Form.Item>
            </Card>

            {/* Missing Submission Policy */}
        <Card 
          title={
            <Space>
              <span>‚öôÔ∏è Ch√≠nh s√°ch h·ªçc sinh ch∆∞a n·ªôp b√†i</span>
              <Tooltip title="C√†i ƒë·∫∑t c√°ch x·ª≠ l√Ω khi h·ªçc sinh kh√¥ng n·ªôp b√†i ƒë√∫ng h·∫°n">
                <InfoCircleOutlined style={{ fontSize: 16, color: '#8c8c8c' }} />
              </Tooltip>
            </Space>
          }
          size="small"
          className="mb-4"
          style={{ 
            background: 'linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%)',
            border: '1px solid #0ea5e9'
          }}
        >
          <Alert
            message="üí° C√†i ƒë·∫∑t t·ª± ƒë·ªông x·ª≠ l√Ω missing submissions"
            description="H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p h·ªçc sinh ch∆∞a n·ªôp b√†i theo ch√≠nh s√°ch b·∫°n thi·∫øt l·∫≠p, gi√∫p ti·∫øt ki·ªám th·ªùi gian v√† ƒë·∫£m b·∫£o c√¥ng b·∫±ng."
            type="info"
            showIcon
            className="mb-6 p-3"
            style={{ borderRadius: '8px' }}
          />

          {/* Auto Grade Section */}
          <div className="mb-6 p-4 bg-white rounded-lg border border-gray-200 shadow-sm">
            <Title level={5} className="text-gray-800 mb-3 flex items-center">
              ü§ñ <span className="ml-2">T·ª± ƒë·ªông ch·∫•m ƒëi·ªÉm</span>
            </Title>
            
            <Form.Item name="autoGradeWhenOverdue" valuePropName="checked" className="mb-4">
              <Checkbox 
                disabled={allowLateSubmission && !form.getFieldValue('maxLateDays')}
                onChange={(e) => {
                  // Check conflict v·ªõi late submission
                  if (allowLateSubmission && !form.getFieldValue('maxLateDays')) {
                    message.warning('B·∫°n c·∫ßn c√†i ƒë·∫∑t s·ªë ng√†y t·ªëi ƒëa n·ªôp mu·ªôn tr∆∞·ªõc khi b·∫≠t auto-grade!');
                    return;
                  }
                  
                  setAutoGradeWhenOverdue(e.target.checked);
                  
                  if (e.target.checked) {
                    // Auto-adjust daysAfterDueForAutoGrade ƒë·ªÉ tr√°nh conflict
                    const maxLateDays = form.getFieldValue('maxLateDays');
                    if (allowLateSubmission && maxLateDays) {
                      const minAutoGradeDays = maxLateDays + 1;
                      form.setFieldsValue({ 
                        autoGradeValue: 0, 
                        daysAfterDueForAutoGrade: minAutoGradeDays 
                      });
                      message.success(`Auto-grade ƒë∆∞·ª£c ƒë·∫∑t ${minAutoGradeDays} ng√†y ƒë·ªÉ tr√°nh conflict v·ªõi late submission`);
                    } else {
                      form.setFieldsValue({ 
                        autoGradeValue: 0, 
                        daysAfterDueForAutoGrade: 1 
                      });
                    }
                  } else {
                    // Clear auto grade values n·∫øu disable
                    form.setFieldsValue({ 
                      autoGradeValue: 0, 
                      daysAfterDueForAutoGrade: 1 
                    });
                  }
                }}
                style={{ fontSize: '15px' }}
              >
                <Space>
                  <span style={{ fontWeight: 500 }}>T·ª± ƒë·ªông ch·∫•m ƒëi·ªÉm khi qu√° h·∫°n</span>
                  <Tooltip title="H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông g√°n ƒëi·ªÉm cho h·ªçc sinh ch∆∞a n·ªôp sau X ng√†y qu√° h·∫°n. Ti·∫øt ki·ªám th·ªùi gian v√† ƒë·∫£m b·∫£o x·ª≠ l√Ω ƒë·ªìng nh·∫•t.">
                    <InfoCircleOutlined style={{ color: '#1890ff' }} />
                  </Tooltip>
                </Space>
              </Checkbox>
            </Form.Item>
            
            {/* Conflict Warning */}
            {allowLateSubmission && !form.getFieldValue('maxLateDays') && (
              <Alert
                message="‚ö†Ô∏è Auto-Grade b·ªã v√¥ hi·ªáu h√≥a"
                description="B·∫°n c·∫ßn c√†i ƒë·∫∑t 'S·ªë ng√†y t·ªëi ƒëa ƒë∆∞·ª£c n·ªôp mu·ªôn' tr∆∞·ªõc khi c√≥ th·ªÉ b·∫≠t t√≠nh nƒÉng auto-grade."
                type="warning"
                showIcon
                className="mb-4"
              />
            )}

            {autoGradeWhenOverdue && (
              <div className="pl-6 border-l-4 border-orange-300 bg-orange-50 p-4 rounded-r-lg">
                <Row gutter={16}>
                  <Col span={12}>
                    <Form.Item
                      name="autoGradeValue"
                      label={
                        <Space>
                          <span>ƒêi·ªÉm t·ª± ƒë·ªông g√°n</span>
                          <Tooltip title="ƒêi·ªÉm s·ªë s·∫Ω ƒë∆∞·ª£c g√°n cho t·∫•t c·∫£ h·ªçc sinh ch∆∞a n·ªôp">
                            <InfoCircleOutlined style={{ color: '#1890ff' }} />
                          </Tooltip>
                        </Space>
                      }
                      rules={[
                        { type: 'number', min: 0, message: 'ƒêi·ªÉm kh√¥ng ƒë∆∞·ª£c √¢m' }
                      ]}
                    >
                      <InputNumber
                        min={0}
                        max={100}
                        style={{ width: '100%' }}
                        placeholder="0"
                        addonAfter="ƒëi·ªÉm"
                        size="large"
                      />
                    </Form.Item>
                  </Col>
                  <Col span={12}>
                    <Form.Item
                      name="daysAfterDueForAutoGrade"
                      label={
                        <Space>
                          <span>Sau bao nhi√™u ng√†y qu√° h·∫°n</span>
                          <Tooltip title={
                            allowLateSubmission 
                              ? `Ph·∫£i l·ªõn h∆°n ${form.getFieldValue('maxLateDays') || 7} ng√†y (th·ªùi gian n·ªôp mu·ªôn) ƒë·ªÉ tr√°nh conflict`
                              : "H·ªá th·ªëng s·∫Ω ƒë·ª£i X ng√†y sau deadline r·ªìi m·ªõi auto-grade"
                          }>
                            <InfoCircleOutlined style={{ color: '#1890ff' }} />
                          </Tooltip>
                        </Space>
                      }
                      rules={[
                        { type: 'number', min: 1, message: '√çt nh·∫•t 1 ng√†y' },
                        {
                          validator: (_, value) => {
                            if (allowLateSubmission) {
                              const maxLateDays = form.getFieldValue('maxLateDays');
                              if (maxLateDays && value && value <= maxLateDays) {
                                return Promise.reject(
                                  `Ph·∫£i l·ªõn h∆°n ${maxLateDays} ng√†y (th·ªùi gian n·ªôp mu·ªôn t·ªëi ƒëa) ƒë·ªÉ tr√°nh conflict!`
                                );
                              }
                            }
                            return Promise.resolve();
                          }
                        }
                      ]}
                    >
                      <InputNumber
                        min={allowLateSubmission ? (form.getFieldValue('maxLateDays') || 7) + 1 : 1}
                        max={30}
                        style={{ width: '100%' }}
                        placeholder={allowLateSubmission ? (form.getFieldValue('maxLateDays') || 7) + 1 : 1}
                        addonAfter="ng√†y"
                        size="large"
                        onChange={(value) => {
                          if (allowLateSubmission) {
                            const maxLateDays = form.getFieldValue('maxLateDays');
                            if (maxLateDays && value <= maxLateDays) {
                              message.warning(`Auto-grade ph·∫£i sau ${maxLateDays} ng√†y ƒë·ªÉ tr√°nh conflict v·ªõi late submission!`);
                            }
                          }
                        }}
                      />
                    </Form.Item>
                  </Col>
                </Row>
                <Alert
                  message="‚ö†Ô∏è C·∫£nh b√°o Auto-Grade"
                  description="Ch·ª©c nƒÉng n√†y s·∫Ω t·ª± ƒë·ªông g√°n ƒëi·ªÉm cho t·∫•t c·∫£ h·ªçc sinh ch∆∞a n·ªôp. H√£y c√¢n nh·∫Øc k·ªπ tr∆∞·ªõc khi b·∫≠t."
                  type="warning"
                  showIcon
                  style={{ borderRadius: '8px',padding: '10px' }}
                  className="mt-3"
                />
              </div>
            )}
          </div>

          {/* Bulk Grading Section */}
          <div className="mb-6 p-4 bg-white rounded-lg border border-gray-200 shadow-sm">
            
            <Form.Item name="allowBulkGrading" valuePropName="checked" className="mb-2">
              <Checkbox 
                onChange={(e) => setAllowBulkGrading(e.target.checked)}
                style={{ fontSize: '15px' }}
              >
                <Space>
                  <span style={{ fontWeight: 500 }}>Cho ph√©p ch·∫•m ƒëi·ªÉm h√†ng lo·∫°t</span>
                  <Tooltip title="Teacher c√≥ th·ªÉ ch·ªçn nhi·ªÅu h·ªçc sinh ch∆∞a n·ªôp v√† ch·∫•m ƒëi·ªÉm c√πng l√∫c v·ªõi ƒëi·ªÉm s·ªë v√† feedback t√πy ch·ªânh">
                    <InfoCircleOutlined style={{ color: '#1890ff' }} />
                  </Tooltip>
                </Space>
              </Checkbox>
            </Form.Item>
            
            <Text type="secondary" className="text-sm block">
              üí° T√≠nh nƒÉng n√†y cho ph√©p teacher linh ho·∫°t ch·∫•m ƒëi·ªÉm cho nh√≥m h·ªçc sinh theo ti√™u ch√≠ ri√™ng
            </Text>
          </div>

          {/* Notification Section */}
          <div className="mb-6 p-4 bg-white rounded-lg border border-gray-200 shadow-sm">
            <Title level={5} className="text-gray-800 mb-3 flex items-center">
              üîî <span className="ml-2">Th√¥ng b√°o & Nh·∫Øc nh·ªü</span>
            </Title>
            
            <Form.Item name="notifyStudentsOfMissingSubmission" valuePropName="checked" className="mb-4">
              <Checkbox 
                onChange={(e) => {
                  setNotifyStudentsOfMissingSubmission(e.target.checked);
                  // Clear reminder days n·∫øu disable notification
                  if (!e.target.checked) {
                    form.setFieldsValue({ reminderDaysBeforeDue: [] });
                  }
                }}
                style={{ fontSize: '15px' }}
              >
                <Space>
                  <span style={{ fontWeight: 500 }}>Th√¥ng b√°o cho h·ªçc sinh ch∆∞a n·ªôp</span>
                  <Tooltip title="G·ª≠i email/notification nh·∫Øc nh·ªü h·ªçc sinh ch∆∞a n·ªôp b√†i v√† c√°c deadline s·∫Øp t·ªõi">
                    <InfoCircleOutlined style={{ color: '#1890ff' }} />
                  </Tooltip>
                </Space>
              </Checkbox>
            </Form.Item>

            {notifyStudentsOfMissingSubmission && (
              <div className="pl-6 border-l-4 border-blue-300 bg-blue-50 p-4 rounded-r-lg">
                <Form.Item
                  name="reminderDaysBeforeDue"
                  label={
                    <Space>
                      <span>Nh·∫Øc nh·ªü tr∆∞·ªõc deadline</span>
                      <Tooltip title="H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông g·ª≠i email nh·∫Øc nh·ªü v√†o c√°c ng√†y ƒë∆∞·ª£c ch·ªçn tr∆∞·ªõc deadline">
                        <InfoCircleOutlined style={{ color: '#1890ff' }} />
                      </Tooltip>
                    </Space>
                  }
                >
                  <Select
                    mode="multiple"
                    placeholder="Ch·ªçn c√°c ng√†y nh·∫Øc nh·ªü"
                    style={{ width: '100%' }}
                    size="large"
                    allowClear
                  >
                    <Option value={1}>1 ng√†y tr∆∞·ªõc</Option>
                    <Option value={2}>2 ng√†y tr∆∞·ªõc</Option>
                    <Option value={3}>3 ng√†y tr∆∞·ªõc</Option>
                    <Option value={5}>5 ng√†y tr∆∞·ªõc</Option>
                    <Option value={7}>7 ng√†y tr∆∞·ªõc</Option>
                  </Select>
                </Form.Item>
                <Text type="secondary" className="text-sm">
                  üìß Email nh·∫Øc nh·ªü s·∫Ω ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông v√†o c√°c th·ªùi ƒëi·ªÉm ƒë√£ ch·ªçn
                </Text>
              </div>
            )}

            {!notifyStudentsOfMissingSubmission && (
              <Alert
                message="üìß Th√¥ng b√°o b·ªã t·∫Øt"
                description="H·ªçc sinh s·∫Ω kh√¥ng nh·∫≠n ƒë∆∞·ª£c email nh·∫Øc nh·ªü v·ªÅ deadline b√†i t·∫≠p"
                type="info"
                showIcon
                className="mt-3 p-2"
              />
            )}
          </div>

          {/* Summary Section */}
          <div className="p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200">
            <Title level={5} className="text-blue-700 mb-3 flex items-center">
              üìã <span className="ml-2">T√≥m t·∫Øt ch√≠nh s√°ch</span>
            </Title>
            <Row gutter={16}>
              <Col span={8}>
                <div className="text-center p-3 bg-white rounded border">
                  <div className="text-2xl mb-1">
                    {autoGradeWhenOverdue ? 'ü§ñ' : '‚ùå'}
                  </div>
                  <Text strong className="block">Auto-Grade</Text>
                  <Text type="secondary" className="text-xs">
                    {autoGradeWhenOverdue ? 'ƒê√£ b·∫≠t' : 'T·∫Øt'}
                  </Text>
                </div>
              </Col>
              <Col span={8}>
                <div className="text-center p-3 bg-white rounded border">
                  <div className="text-2xl mb-1">
                    {allowBulkGrading ? 'üìä' : '‚ùå'}
                  </div>
                  <Text strong className="block">Bulk Grade</Text>
                  <Text type="secondary" className="text-xs">
                    {allowBulkGrading ? 'Cho ph√©p' : 'Kh√¥ng cho ph√©p'}
                  </Text>
                </div>
              </Col>
              <Col span={8}>
                <div className="text-center p-3 bg-white rounded border">
                  <div className="text-2xl mb-1">
                    {notifyStudentsOfMissingSubmission ? 'üîî' : 'üîï'}
                  </div>
                  <Text strong className="block">Th√¥ng b√°o</Text>
                  <Text type="secondary" className="text-xs">
                    {notifyStudentsOfMissingSubmission ? 'ƒê√£ b·∫≠t' : 'T·∫Øt'}
                  </Text>
                </div>
              </Col>
                         </Row>
           </div>
         </Card>
          </Col>
        </Row>
      </Form>
    </Modal>
  );
};

export default AssignmentCreateModal; 