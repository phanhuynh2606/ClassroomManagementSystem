import React, { useState, useEffect } from 'react';
import {
  Modal,
  Form,
  Input,
  DatePicker,
  Select,
  Upload,
  Switch,
  InputNumber,
  Typography,
  Space,
  Card,
  Row,
  Col,
  Divider,
  message,
  Radio,
  Checkbox,
  Button,
  Tooltip,
  Alert
} from 'antd';
import {
  UploadOutlined,
  FileTextOutlined,
  CalendarOutlined,
  PaperClipOutlined,
  InfoCircleOutlined,
  SettingOutlined
} from '@ant-design/icons';
import moment from 'moment';
import CustomQuillEditor from '../../CustomQuillEditor';
import 'react-quill/dist/quill.snow.css';

const { Title, Text } = Typography;
const { TextArea } = Input;
const { Option } = Select;
const { RangePicker } = DatePicker;

const AssignmentCreateModal = ({ 
  visible, 
  onCancel, 
  onOk, 
  loading = false,
  initialValues = null,
  mode = 'create' // 'create' | 'edit'
}) => {
  const [form] = Form.useForm();
  const [submissionType, setSubmissionType] = useState('both');
  const [allowLateSubmission, setAllowLateSubmission] = useState(false);
  const [attachments, setAttachments] = useState([]);
  const [description, setDescription] = useState('');
  const [visibility, setVisibility] = useState('published');

  // Handle initialValues for edit mode
  useEffect(() => {
    if (initialValues?.description) {
      setDescription(initialValues.description);
    }
    if (initialValues?.allowLateSubmission !== undefined) {
      setAllowLateSubmission(initialValues.allowLateSubmission);
    }
    if (initialValues?.submissionSettings?.type) {
      setSubmissionType(initialValues.submissionSettings.type);
    }
    if (initialValues?.visibility) {
      setVisibility(initialValues.visibility);
    }
  }, [initialValues]);

  const handleOk = () => {
    form.validateFields().then(values => {
      // Process form data
      let publishDate = null;
      if (values.visibility === 'published') {
        // Xu·∫•t b·∫£n ngay - set publishDate = hi·ªán t·∫°i
        publishDate = new Date().toISOString();
      } else if (values.visibility === 'scheduled' && values.publishDate) {
        // L√™n l·ªãch xu·∫•t b·∫£n - s·ª≠ d·ª•ng publishDate t·ª´ form
        publishDate = values.publishDate.toISOString();
      }
      // B·∫£n nh√°p - publishDate = null

      const assignmentData = {
        ...values,
        description: description, // Use description from state (rich text content)
        dueDate: values.dueDate?.toISOString(),
        publishDate: publishDate,
        attachments: attachments,
        allowLateSubmission: allowLateSubmission,
        latePenalty: values.latePenalty || 0,
        submissionSettings: {
          type: submissionType,
          maxFileSize: values.maxFileSize || 10,
          allowedFileTypes: values.allowedFileTypes || [],
          textSubmissionRequired: values.textSubmissionRequired || false,
          fileSubmissionRequired: values.fileSubmissionRequired || false
        }
      };
      
      onOk(assignmentData);
    }).catch(error => {
      console.error('Validation failed:', error);
    });
  };

  const handleCancel = () => {
    form.resetFields();
    setAttachments([]);
    setSubmissionType('both');
    setAllowLateSubmission(false);
    setDescription('');
    setVisibility('published');
    onCancel();
  };

  const handleUploadChange = ({ fileList }) => {
    setAttachments(fileList);
  };

  const beforeUpload = (file) => {
    const isValidSize = file.size / 1024 / 1024 < 50; // 50MB limit
    if (!isValidSize) {
      message.error('File size must be less than 50MB!');
    }
    return false; // Prevent auto upload
  };

  return (
    <Modal
      title={
        <Space>
          <FileTextOutlined />
          {mode === 'create' ? 'T·∫°o b√†i t·∫≠p m·ªõi' : 'Ch·ªânh s·ª≠a b√†i t·∫≠p'}
        </Space>
      }
      open={visible}
      onOk={handleOk}
      onCancel={handleCancel}
      confirmLoading={loading}
      width={900}
      okText={mode === 'create' ? 'T·∫°o b√†i t·∫≠p' : 'C·∫≠p nh·∫≠t'}
      cancelText="H·ªßy"
      style={{ top: 20 }}
    >
      <Form
        form={form}
        layout="vertical"
        initialValues={{
          totalPoints: 100,
          allowLateSubmission: false,
          latePenalty: 10,
          maxFileSize: 10,
          visibility: 'published',
          ...initialValues
        }}
      >
        {/* Basic Information */}
        <Card title="üìù Th√¥ng tin c∆° b·∫£n" size="small" className="mb-4">
          <Form.Item
            name="title"
            label="Ti√™u ƒë·ªÅ b√†i t·∫≠p"
            rules={[
              { required: true, message: 'Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ b√†i t·∫≠p' },
              { min: 5, message: 'Ti√™u ƒë·ªÅ ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±' }
            ]}
          >
            <Input placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i t·∫≠p" />
          </Form.Item>

          <Form.Item
            name="description"
            label={
              <Space>
                <span>M√¥ t·∫£ & y√™u c·∫ßu</span>
                <Tooltip title="S·ª≠ d·ª•ng tr√¨nh so·∫°n th·∫£o ƒë·ªÉ ƒë·ªãnh d·∫°ng n·ªôi dung: ƒë√°nh s·ªë, bullet points, in ƒë·∫≠m, in nghi√™ng, ch√®n link, v.v...">
                  <InfoCircleOutlined style={{ color: '#1890ff' }} />
                </Tooltip>
              </Space>
            }
            rules={[
              { required: true, message: 'Vui l√≤ng nh·∫≠p m√¥ t·∫£ b√†i t·∫≠p' },
              { 
                validator: (_, value) => {
                  // Remove HTML tags to check actual text length
                  const textContent = description.replace(/<[^>]*>/g, '').trim();
                  if (textContent.length < 20) {
                    return Promise.reject(new Error('M√¥ t·∫£ ph·∫£i c√≥ √≠t nh·∫•t 20 k√Ω t·ª±'));
                  }
                  return Promise.resolve();
                }
              }
            ]}
          >
            <CustomQuillEditor
              value={description}
              onChange={(content) => {
                setDescription(content);
                form.setFieldsValue({ description: content });
              }}
              placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt, y√™u c·∫ßu v√† h∆∞·ªõng d·∫´n l√†m b√†i..."
              style={{ 
                minHeight: '200px',
                backgroundColor: '#fff',
                border: '1px solid #d9d9d9',
                borderRadius: '4px'
              }}
              modules={{
                toolbar: {
                  container: [
                    [{ 'header': [1, 2, 3, false] }],
                    ['bold', 'italic', 'underline', 'strike'],
                    [{ 'color': [] }, { 'background': [] }],
                    [{ 'list': 'ordered'}, { 'list': 'bullet' }, { 'list': 'check' }],
                    [{ 'indent': '-1'}, { 'indent': '+1' }],
                    [{ 'align': [] }],
                    ['link', 'blockquote', 'code-block'],
                    ['clean']
                  ],
                },
              }}
              formats={[
                'header', 'bold', 'italic', 'underline', 'strike',
                'list', 'bullet', 'check', 'indent', 'link', 'blockquote',
                'code-block', 'color', 'background', 'align'
              ]}
            />
            <div style={{ marginTop: 8 }}>
              <Text type="secondary" style={{ fontSize: 12 }}>
                üí° Tip: S·ª≠ d·ª•ng c√°c c√¥ng c·ª• ƒë·ªãnh d·∫°ng ƒë·ªÉ l√†m n·ªïi b·∫≠t y√™u c·∫ßu quan tr·ªçng, t·∫°o danh s√°ch c√¥ng vi·ªác, ho·∫∑c ch√®n code m·∫´u
              </Text>
            </div>
          </Form.Item>

          <Form.Item
            name="instructions"
            label="H∆∞·ªõng d·∫´n b·ªï sung"
          >
            <TextArea
              rows={3}
              placeholder="H∆∞·ªõng d·∫´n c√°ch l√†m b√†i, format n·ªôp b√†i, ti√™u ch√≠ ch·∫•m ƒëi·ªÉm..."
              showCount
              maxLength={1000}
            />
          </Form.Item>
        </Card>

        {/* Attachments */}
        <Card title="üìé File ƒë√≠nh k√®m" size="small" className="mb-4">
          <Form.Item
            name="attachments"
            label="T√†i li·ªáu h∆∞·ªõng d·∫´n (optional)"
          >
            <Upload.Dragger
              multiple
              beforeUpload={beforeUpload}
              onChange={handleUploadChange}
              fileList={attachments}
              accept=".pdf,.doc,.docx,.ppt,.pptx,.xls,.xlsx,.txt,.zip,.rar"
            >
              <p className="ant-upload-drag-icon">
                <PaperClipOutlined />
              </p>
              <p className="ant-upload-text">
                K√©o th·∫£ file ho·∫∑c click ƒë·ªÉ ch·ªçn
              </p>
              <p className="ant-upload-hint">
                H·ªó tr·ª£: PDF, Word, Excel, PowerPoint, ZIP, RAR (t·ªëi ƒëa 50MB m·ªói file)
              </p>
            </Upload.Dragger>
          </Form.Item>
        </Card>

        {/* Timing & Scoring */}
        <Card title="‚è∞ Th·ªùi gian & ƒêi·ªÉm s·ªë" size="small" className="mb-4">
          <Row gutter={16}>
            <Col span={8}>
              <Form.Item
                name="totalPoints"
                label="T·ªïng ƒëi·ªÉm"
                rules={[
                  { required: true, message: 'Vui l√≤ng nh·∫≠p t·ªïng ƒëi·ªÉm' },
                  { type: 'number', min: 1, max: 1000, message: 'ƒêi·ªÉm t·ª´ 1-1000' }
                ]}
              >
                <InputNumber
                  min={1}
                  max={1000}
                  style={{ width: '100%' }}
                  placeholder="100"
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="dueDate"
                label="H·∫°n n·ªôp b√†i"
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn h·∫°n n·ªôp b√†i' }]}
              >
                <DatePicker
                  showTime
                  format="DD/MM/YYYY HH:mm"
                  placeholder="Ch·ªçn th·ªùi gian"
                  style={{ width: '100%' }}
                  disabledDate={(current) => current && current < moment().endOf('day')}
                />
              </Form.Item>
            </Col>
            <Col span={8}>
              <Form.Item
                name="publishDate"
                label={
                  <Space>
                    <span>Th·ªùi gian c√¥ng b·ªë</span>
                    {visibility === 'scheduled' && (
                      <Tooltip title="B√†i t·∫≠p s·∫Ω t·ª± ƒë·ªông xu·∫•t hi·ªán trong danh s√°ch b√†i t·∫≠p c·ªßa h·ªçc vi√™n v√†o th·ªùi ƒëi·ªÉm n√†y">
                        <InfoCircleOutlined style={{ color: '#1890ff' }} />
                      </Tooltip>
                    )}
                  </Space>
                }
                rules={[
                  {
                    required: visibility === 'scheduled',
                    message: 'Vui l√≤ng ch·ªçn th·ªùi gian c√¥ng b·ªë'
                  },
                  {
                    validator: (_, value) => {
                      if (visibility === 'scheduled' && value && value.isBefore(moment())) {
                        return Promise.reject(new Error('Th·ªùi gian c√¥ng b·ªë ph·∫£i trong t∆∞∆°ng lai'));
                      }
                      return Promise.resolve();
                    }
                  }
                ]}
                extra={visibility === 'scheduled' && 
                  <Text type="secondary" style={{ fontSize: 12 }}>
                    ƒê·ªãnh d·∫°ng: DD/MM/YYYY HH:mm (24 gi·ªù)
                  </Text>
                }
              >
                <DatePicker
                  showTime
                  format="DD/MM/YYYY HH:mm"
                  placeholder={visibility === 'scheduled' ? 'Ch·ªçn th·ªùi gian' : 'Ngay l·∫≠p t·ª©c'}
                  style={{ width: '100%' }}
                  disabled={visibility !== 'scheduled'}
                  disabledDate={(current) => current && current < moment().startOf('day')}
                />
              </Form.Item>
            </Col>
          </Row>
        </Card>

        {/* Submission Settings */}
        <Card title="üì§ C√†i ƒë·∫∑t n·ªôp b√†i" size="small" className="mb-4">
          <Form.Item
            name="submissionType"
            label="H√¨nh th·ª©c n·ªôp b√†i"
            rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn h√¨nh th·ª©c n·ªôp b√†i' }]}
          >
            <Radio.Group 
              value={submissionType}
              onChange={(e) => setSubmissionType(e.target.value)}
            >
              <Radio value="text">Ch·ªâ nh·∫≠p text tr·ª±c ti·∫øp</Radio>
              <Radio value="file">Ch·ªâ upload file</Radio>
              <Radio value="both">C·∫£ text v√† file</Radio>
            </Radio.Group>
          </Form.Item>

          {(submissionType === 'file' || submissionType === 'both') && (
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item
                  name="maxFileSize"
                  label="K√≠ch th∆∞·ªõc file t·ªëi ƒëa (MB)"
                >
                  <InputNumber
                    min={1}
                    max={100}
                    style={{ width: '100%' }}
                    placeholder="10"
                  />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item
                  name="allowedFileTypes"
                  label="Lo·∫°i file cho ph√©p"
                >
                  <Select
                    mode="multiple"
                    placeholder="T·∫•t c·∫£ file types"
                  >
                    <Option value="pdf">PDF</Option>
                    <Option value="doc">Word</Option>
                    <Option value="xls">Excel</Option>
                    <Option value="ppt">PowerPoint</Option>
                    <Option value="txt">Text</Option>
                    <Option value="zip">ZIP/RAR</Option>
                    <Option value="image">Images</Option>
                  </Select>
                </Form.Item>
              </Col>
            </Row>
          )}

          <Divider />

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item name="allowLateSubmission" valuePropName="checked">
                <Checkbox 
                  onChange={(e) => setAllowLateSubmission(e.target.checked)}
                >
                  Cho ph√©p n·ªôp mu·ªôn
                </Checkbox>
              </Form.Item>
            </Col>
            {allowLateSubmission && (
              <Col span={12}>
                <Form.Item
                  name="latePenalty"
                  label="Ph·∫°t ƒëi·ªÉm n·ªôp mu·ªôn (%/ng√†y)"
                >
                  <InputNumber
                    min={0}
                    max={100}
                    style={{ width: '100%' }}
                    placeholder="10"
                  />
                </Form.Item>
              </Col>
            )}
          </Row>

          {submissionType === 'both' && (
            <Row gutter={16}>
              <Col span={12}>
                <Form.Item name="textSubmissionRequired" valuePropName="checked">
                  <Checkbox>B·∫Øt bu·ªôc nh·∫≠p text</Checkbox>
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item name="fileSubmissionRequired" valuePropName="checked">
                  <Checkbox>B·∫Øt bu·ªôc upload file</Checkbox>
                </Form.Item>
              </Col>
            </Row>
          )}
        </Card>

        {/* Publishing Settings */}
        <Card 
          title={
            <Space>
              <span>üåê C√†i ƒë·∫∑t xu·∫•t b·∫£n</span>
              <Tooltip title="Ki·ªÉm so√°t khi n√†o b√†i t·∫≠p hi·ªÉn th·ªã cho h·ªçc vi√™n">
                <InfoCircleOutlined style={{ fontSize: 16, color: '#8c8c8c' }} />
              </Tooltip>
            </Space>
          }
          size="small"
        >
          {visibility === 'scheduled' && (
            <div style={{ marginBottom: 16, padding: '12px', background: '#e6f7ff', borderRadius: 4, border: '1px solid #91d5ff' }}>
              <Space direction="vertical" size={4} style={{ width: '100%' }}>
                <Space>
                  <InfoCircleOutlined style={{ color: '#1890ff' }} />
                  <Text strong style={{ color: '#1890ff' }}>L√™n l·ªãch xu·∫•t b·∫£n</Text>
                </Space>
                <Text type="secondary" style={{ fontSize: 13 }}>
                  ‚Ä¢ B√†i t·∫≠p s·∫Ω t·ª± ƒë·ªông hi·ªÉn th·ªã cho h·ªçc vi√™n v√†o th·ªùi gian ƒë√£ ch·ªçn
                </Text>
                <Text type="secondary" style={{ fontSize: 13 }}>
                  ‚Ä¢ H·ªçc vi√™n kh√¥ng th·ªÉ xem b√†i t·∫≠p tr∆∞·ªõc th·ªùi ƒëi·ªÉm c√¥ng b·ªë
                </Text>
                <Text type="secondary" style={{ fontSize: 13 }}>
                  ‚Ä¢ B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a ho·∫∑c h·ªßy l·ªãch tr∆∞·ªõc khi c√¥ng b·ªë
                </Text>
              </Space>
            </div>
          )}
          {visibility === 'draft' && (
            <div style={{ marginBottom: 16, padding: '12px', background: '#f6f6f6', borderRadius: 4, border: '1px solid #d9d9d9' }}>
              <Space>
                <InfoCircleOutlined style={{ color: '#8c8c8c' }} />
                <Text type="secondary">
                  B√†i t·∫≠p ·ªü ch·∫ø ƒë·ªô nh√°p s·∫Ω kh√¥ng hi·ªÉn th·ªã cho h·ªçc vi√™n cho ƒë·∫øn khi b·∫°n xu·∫•t b·∫£n
                </Text>
              </Space>
            </div>
          )}
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="visibility"
                label="Tr·∫°ng th√°i"
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn tr·∫°ng th√°i' }]}
              >
                <Select
                  onChange={(value) => {
                    setVisibility(value);
                    // Clear publishDate n·∫øu kh√¥ng ph·∫£i scheduled
                    if (value !== 'scheduled') {
                      form.setFieldValue('publishDate', null);
                    }
                  }}
                >
                  <Option value="draft">
                    <Tooltip title="L∆∞u b√†i t·∫≠p nh∆∞ng ch∆∞a hi·ªÉn th·ªã cho h·ªçc vi√™n">
                      <Space>
                        <InfoCircleOutlined />
                        B·∫£n nh√°p
                      </Space>
                    </Tooltip>
                  </Option>
                  <Option value="published">
                    <Tooltip title="B√†i t·∫≠p s·∫Ω hi·ªÉn th·ªã ngay l·∫≠p t·ª©c cho h·ªçc vi√™n">
                      <Space>
                        <CalendarOutlined />
                        Xu·∫•t b·∫£n ngay
                      </Space>
                    </Tooltip>
                  </Option>
                  <Option value="scheduled">
                    <Tooltip title="B√†i t·∫≠p s·∫Ω t·ª± ƒë·ªông hi·ªÉn th·ªã v√†o th·ªùi gian ƒë√£ ƒë·ªãnh">
                      <Space>
                        <SettingOutlined />
                        L√™n l·ªãch xu·∫•t b·∫£n
                      </Space>
                    </Tooltip>
                  </Option>
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="tags"
                label="Tags (optional)"
              >
                <Select
                  mode="tags"
                  placeholder="Th√™m tags ƒë·ªÉ d·ªÖ t√¨m ki·∫øm"
                >
                  <Option value="homework">B√†i t·∫≠p v·ªÅ nh√†</Option>
                  <Option value="project">D·ª± √°n</Option>
                  <Option value="lab">Th·ª±c h√†nh</Option>
                  <Option value="essay">Lu·∫≠n vƒÉn</Option>
                </Select>
              </Form.Item>
            </Col>
          </Row>
        </Card>
      </Form>
    </Modal>
  );
};

export default AssignmentCreateModal; 